"use strict";
var core_1 = require("@angular/core");
var router_1 = require("nativescript-angular/router");
var app_component_1 = require("./app.component");
var main_1 = require("./views/main");
var insert_component_1 = require("./views/inserts/insert-component");
var delete_component_1 = require("./views/deletes/delete-component");
var main_test_1 = require("./views/test/main-test");
var login_component_1 = require("./views/setting/login/login-component");
var main_2 = require("./views/list/main");
var view_item_1 = require("./views/views-item/view-item");
var detail_1 = require("./views/list-detail/detail");
var history_component_1 = require("./views/history/history-component");
var favorite_component_1 = require("./views/favorite/favorite-component");
var routes = [
    { path: "", redirectTo: "/main", pathMatch: "full" },
    { path: "insert", component: insert_component_1.Inserts },
    { path: "main", component: main_1.ViewComponent },
    { path: "sample", component: app_component_1.AppComponent },
    { path: "delete", component: delete_component_1.DeleteComponent },
    { path: "view_test", component: main_test_1.ViewComponentTest },
    { path: "login", component: login_component_1.LoginComponent },
    { path: "list", component: main_2.ListComponent },
    { path: "view-list", component: view_item_1.ViewItem },
    { path: "list-detail", component: detail_1.ListDetailComponent },
    { path: "history", component: history_component_1.HistoryComponent },
    { path: "favorite", component: favorite_component_1.FavoriteComponent }
];
var AppRoutingModule = (function () {
    function AppRoutingModule() {
    }
    return AppRoutingModule;
}());
AppRoutingModule = __decorate([
    core_1.NgModule({
        imports: [router_1.NativeScriptRouterModule.forRoot(routes)],
        exports: [router_1.NativeScriptRouterModule]
    })
], AppRoutingModule);
exports.AppRoutingModule = AppRoutingModule;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBwLnJvdXRpbmcuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJhcHAucm91dGluZy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsc0NBQXlDO0FBQ3pDLHNEQUF1RTtBQUl2RSxpREFBK0M7QUFDL0MscUNBQTZDO0FBQzdDLHFFQUEyRDtBQUMzRCxxRUFBbUU7QUFDbkUsb0RBQTJEO0FBQzNELHlFQUF1RTtBQUN2RSwwQ0FBa0Q7QUFDbEQsMERBQXdEO0FBQ3hELHFEQUFpRTtBQUNqRSx1RUFBcUU7QUFDckUsMEVBQXdFO0FBSXhFLElBQU0sTUFBTSxHQUFXO0lBQ25CLEVBQUUsSUFBSSxFQUFFLEVBQUUsRUFBRSxVQUFVLEVBQUUsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLEVBQUU7SUFDcEQsRUFBRSxJQUFJLEVBQUUsUUFBUSxFQUFHLFNBQVMsRUFBRywwQkFBTyxFQUFFO0lBQ3hDLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRyxTQUFTLEVBQUcsb0JBQWEsRUFBQztJQUMzQyxFQUFFLElBQUksRUFBRSxRQUFRLEVBQUcsU0FBUyxFQUFHLDRCQUFZLEVBQUM7SUFDNUMsRUFBRSxJQUFJLEVBQUUsUUFBUSxFQUFHLFNBQVMsRUFBRyxrQ0FBZSxFQUFDO0lBQy9DLEVBQUUsSUFBSSxFQUFFLFdBQVcsRUFBRyxTQUFTLEVBQUcsNkJBQWlCLEVBQUM7SUFDcEQsRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUFHLFNBQVMsRUFBRyxnQ0FBYyxFQUFDO0lBQzdDLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRyxTQUFTLEVBQUUsb0JBQWEsRUFBRTtJQUMzQyxFQUFFLElBQUksRUFBRSxXQUFXLEVBQUcsU0FBUyxFQUFFLG9CQUFRLEVBQUU7SUFDM0MsRUFBRSxJQUFJLEVBQUUsYUFBYSxFQUFHLFNBQVMsRUFBQyw0QkFBbUIsRUFBQztJQUN0RCxFQUFFLElBQUksRUFBRSxTQUFTLEVBQUcsU0FBUyxFQUFDLG9DQUFnQixFQUFFO0lBQ2hELEVBQUUsSUFBSSxFQUFFLFVBQVUsRUFBRyxTQUFTLEVBQUcsc0NBQWlCLEVBQUM7Q0FDdEQsQ0FBQztBQU9GLElBQWEsZ0JBQWdCO0lBQTdCO0lBQWdDLENBQUM7SUFBRCx1QkFBQztBQUFELENBQUMsQUFBakMsSUFBaUM7QUFBcEIsZ0JBQWdCO0lBTDVCLGVBQVEsQ0FBQztRQUNOLE9BQU8sRUFBRSxDQUFDLGlDQUF3QixDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUNuRCxPQUFPLEVBQUUsQ0FBQyxpQ0FBd0IsQ0FBQztLQUN0QyxDQUFDO0dBRVcsZ0JBQWdCLENBQUk7QUFBcEIsNENBQWdCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTmdNb2R1bGUgfSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xuaW1wb3J0IHsgTmF0aXZlU2NyaXB0Um91dGVyTW9kdWxlIH0gZnJvbSBcIm5hdGl2ZXNjcmlwdC1hbmd1bGFyL3JvdXRlclwiO1xuaW1wb3J0IHsgUm91dGVzIH0gZnJvbSBcIkBhbmd1bGFyL3JvdXRlclwiO1xuXG5cbmltcG9ydCB7IEFwcENvbXBvbmVudCB9IGZyb20gXCIuL2FwcC5jb21wb25lbnRcIjtcbmltcG9ydCB7IFZpZXdDb21wb25lbnQgfSBmcm9tIFwiLi92aWV3cy9tYWluXCI7XG5pbXBvcnQgeyBJbnNlcnRzIH0gZnJvbSBcIi4vdmlld3MvaW5zZXJ0cy9pbnNlcnQtY29tcG9uZW50XCI7XG5pbXBvcnQgeyBEZWxldGVDb21wb25lbnQgfSBmcm9tIFwiLi92aWV3cy9kZWxldGVzL2RlbGV0ZS1jb21wb25lbnRcIjtcbmltcG9ydCB7IFZpZXdDb21wb25lbnRUZXN0IH0gZnJvbSBcIi4vdmlld3MvdGVzdC9tYWluLXRlc3RcIjtcbmltcG9ydCB7IExvZ2luQ29tcG9uZW50IH0gZnJvbSBcIi4vdmlld3Mvc2V0dGluZy9sb2dpbi9sb2dpbi1jb21wb25lbnRcIjtcbmltcG9ydCB7IExpc3RDb21wb25lbnQgfSBmcm9tIFwiLi92aWV3cy9saXN0L21haW5cIjtcbmltcG9ydCB7IFZpZXdJdGVtIH0gZnJvbSBcIi4vdmlld3Mvdmlld3MtaXRlbS92aWV3LWl0ZW1cIjtcbmltcG9ydCB7IExpc3REZXRhaWxDb21wb25lbnQgfSBmcm9tIFwiLi92aWV3cy9saXN0LWRldGFpbC9kZXRhaWxcIjtcbmltcG9ydCB7IEhpc3RvcnlDb21wb25lbnQgfSBmcm9tIFwiLi92aWV3cy9oaXN0b3J5L2hpc3RvcnktY29tcG9uZW50XCI7XG5pbXBvcnQgeyBGYXZvcml0ZUNvbXBvbmVudCB9IGZyb20gXCIuL3ZpZXdzL2Zhdm9yaXRlL2Zhdm9yaXRlLWNvbXBvbmVudFwiO1xuXG5cblxuY29uc3Qgcm91dGVzOiBSb3V0ZXMgPSBbXG4gICAgeyBwYXRoOiBcIlwiLCByZWRpcmVjdFRvOiBcIi9tYWluXCIsIHBhdGhNYXRjaDogXCJmdWxsXCIgfSxcbiAgICB7IHBhdGg6IFwiaW5zZXJ0XCIgLCBjb21wb25lbnQgOiBJbnNlcnRzIH0sXG4gICAgeyBwYXRoOiBcIm1haW5cIiAsIGNvbXBvbmVudCA6IFZpZXdDb21wb25lbnR9LFxuICAgIHsgcGF0aDogXCJzYW1wbGVcIiAsIGNvbXBvbmVudCA6IEFwcENvbXBvbmVudH0sXG4gICAgeyBwYXRoOiBcImRlbGV0ZVwiICwgY29tcG9uZW50IDogRGVsZXRlQ29tcG9uZW50fSxcbiAgICB7IHBhdGg6IFwidmlld190ZXN0XCIgLCBjb21wb25lbnQgOiBWaWV3Q29tcG9uZW50VGVzdH0sXG4gICAgeyBwYXRoOiBcImxvZ2luXCIgLCBjb21wb25lbnQgOiBMb2dpbkNvbXBvbmVudH0sXG4gICAgeyBwYXRoOiBcImxpc3RcIiAsIGNvbXBvbmVudDogTGlzdENvbXBvbmVudCB9LFxuICAgIHsgcGF0aDogXCJ2aWV3LWxpc3RcIiAsIGNvbXBvbmVudDogVmlld0l0ZW0gfSxcbiAgICB7IHBhdGg6IFwibGlzdC1kZXRhaWxcIiAsIGNvbXBvbmVudDpMaXN0RGV0YWlsQ29tcG9uZW50fSxcbiAgICB7IHBhdGg6IFwiaGlzdG9yeVwiICwgY29tcG9uZW50Okhpc3RvcnlDb21wb25lbnQgfSxcbiAgICB7IHBhdGg6IFwiZmF2b3JpdGVcIiAsIGNvbXBvbmVudCA6IEZhdm9yaXRlQ29tcG9uZW50fVxuXTtcblxuQE5nTW9kdWxlKHtcbiAgICBpbXBvcnRzOiBbTmF0aXZlU2NyaXB0Um91dGVyTW9kdWxlLmZvclJvb3Qocm91dGVzKV0sXG4gICAgZXhwb3J0czogW05hdGl2ZVNjcmlwdFJvdXRlck1vZHVsZV1cbn0pXG5cbmV4cG9ydCBjbGFzcyBBcHBSb3V0aW5nTW9kdWxlIHsgfSJdfQ==