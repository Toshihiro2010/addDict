"use strict";
var core_1 = require("@angular/core");
var router_1 = require("@angular/router");
var dialogs = require("ui/dialogs");
var Sqlite = require("nativescript-sqlite");
var ListDetailComponent = (function () {
    function ListDetailComponent(route) {
        var _this = this;
        this.route = route;
        var self = this;
        this.route.queryParams.subscribe(function (params) {
            console.log(JSON.stringify(params));
            self.word = JSON.parse(params["words"]); // ให้ตัวแปร self.word รับค่าจาก list main ด้วยรูป json โดยส่งมาในชื่อ words ด้วยคำสั่ง params["words"]
            console.log(self.word.id);
            console.log(self.word.wordEng);
            console.log(self.word.wordThai);
            console.log(self.word.wordType);
            console.log(self.word.wordFavorite);
            self.favorite = self.word.wordFavorite; // ให้ favorite = 
            self.word.wordType = "[" + self.word.wordType + "]";
            new Sqlite("dicts.db").then(function (db) {
                _this.database = db;
                console.log("Open database Success");
            }, function (error) {
                console.log("Open DB ERROR", error);
            });
        });
    }
    ListDetailComponent.prototype.ngOnInit = function () {
        var self = this;
        self.myHistory();
    };
    ListDetailComponent.prototype.myFavorite = function () {
        console.log("click Favorite");
        var self = this;
        if (self.favorite == 0) {
            self.favorite = 1;
            self.database.execSQL("UPDATE dict SET favorite = (?) WHERE id = (?) ", [self.favorite, self.word.id], function (err, db) {
                if (err) {
                    console.log("error is == > ", err);
                }
                else {
                    console.log("Update Success");
                }
            });
        }
        else if (self.favorite == 1) {
            self.favorite = 0;
            self.database.execSQL("UPDATE dict SET favorite = (?) WHERE id = (?)", [self.favorite, self.word.id], function (err, db) {
                if (err) {
                    console.log("error is == > ", err);
                }
                else {
                    console.log("Update Success");
                }
            });
        }
    };
    ListDetailComponent.prototype.myHistory = function () {
        var self = this;
        var word_id = self.word.id;
        self.myCheckHistory(word_id);
    };
    ListDetailComponent.prototype.myCheckHistory = function (word_id) {
        var self = this;
        self.database.all("SELECT * FROM HISTORY WHERE word_id = (?)", [word_id]).then(function (rows) {
            if (rows == "") {
                self.myInsertHistory(word_id);
            }
            else {
                self.myDeleteHistory(word_id);
            }
        }, function (error) {
            console.log("SELECT ERROR ", error);
        });
    };
    ListDetailComponent.prototype.myDeleteHistory = function (word_id) {
        var self = this;
        self.database.execSQL("DELETE FROM HISTORY WHERE word_id = (?)", [word_id]).then(function (word_delete) {
            console.log("DELETE RESULT => ", word_delete);
            self.myInsertHistory(word_id);
        }, function (error) {
            console.log("DELETE ERROR => ", error);
        });
    };
    ListDetailComponent.prototype.myInsertHistory = function (word_id) {
        var self = this;
        self.database.execSQL("INSERT INTO HISTORY (word_id) VALUES (?)", [word_id]).then(function (word_insert) {
            console.log("INSERT RESULT => ", word_insert);
        }, function (error) {
            console.log("INSERT ERROR => ", error);
        });
    };
    ListDetailComponent.prototype.fetchJoin = function () {
        var self = this;
        console.log("go to fetch Join ==== > ");
        self.database.all("SELECT h.id, h.word_id , d.engWorld , d.thaiWorld , d.type FROM dict d join HISTORY h on d.id = h.word_id ORDER BY h.id DESC").then(function (rows) {
            for (var row in rows) {
                console.log("Result ==v");
                /*for(var i=0 ; i <= rows.length ; i++ ){
                    console.log("result ==>" , rows[row][i]);
                }*/
                console.log("result all ==> ", rows[row]); //result all
            }
        }, function (error) {
            console.log("SELECT ERROR ", error);
        });
    };
    return ListDetailComponent;
}());
ListDetailComponent = __decorate([
    core_1.Component({
        selector: "ns-app",
        templateUrl: "views/list-detail/detail.html",
    }),
    __metadata("design:paramtypes", [router_1.ActivatedRoute])
], ListDetailComponent);
exports.ListDetailComponent = ListDetailComponent;
//# sourceMappingURL=data:application/json;base64,