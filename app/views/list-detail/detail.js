"use strict";
var core_1 = require("@angular/core");
var router_1 = require("@angular/router");
var observable_1 = require("data/observable");
var fs = require("file-system"); //เรียกใช้เพื่อเข้าถึง uri
var dialogs = require("ui/dialogs");
var Sqlite = require("nativescript-sqlite");
var http = require("http");
var sound = require("nativescript-sound"); //เรียกใช้ plugin sound
var ListDetailComponent = (function (_super) {
    __extends(ListDetailComponent, _super);
    function ListDetailComponent(route) {
        var _this = _super.call(this) || this;
        _this.route = route;
        _this.url = "http://translate.google.com/translate_tts?ie=UTF-8&tl=en&client=tw-ob&q="; // link สำหรับ load ไฟล์จาก google traslate
        var self = _this;
        _this.route.queryParams.subscribe(function (params) {
            console.log(JSON.stringify(params));
            self.word = JSON.parse(params["words"]); // ให้ตัวแปร self.word รับค่าจาก list main ด้วยรูป json โดยส่งมาในชื่อ words ด้วยคำสั่ง params["words"]
            console.log(self.word.id);
            console.log(self.word.dict_search);
            console.log(self.word.dict_meaning);
            self.favorite = 0;
            ; // ให้ favorite
            /*let temp = self.word.wordType;
            self.word.wordType = self.changWordType(temp);
            console.log(self.word.wordType);*/
            self.url = self.url + self.word.dict_search; //set word สำหรับค้นหา googletraslate
            self.setButtonSound(self.url);
            //เรียกเปิดใช้ Databasee
            new Sqlite("dicts.db").then(function (db) {
                self.database = db;
                console.log("Open database Success");
            }, function (error) {
                console.log("Open DB ERROR", error);
            });
        });
        return _this;
    }
    ListDetailComponent.prototype.ngOnInit = function () {
        var self = this;
        self.myHistory();
    };
    ListDetailComponent.prototype.myFavorite = function () {
        console.log("click Favorite");
        var self = this;
        var word_id = self.word.id;
        self.myCheckFavorite(word_id);
        /*
        if(self.favorite == 0 ){
            self.favorite = 1;
            self.database.execSQL("UPDATE dict SET favorite = (?) WHERE id = (?) " ,[self.favorite , self.word.id] , function(err , db ){
            if(err){
                console.log("error is == > " , err);
            }else{
                console.log("Update Success");
                
            }
        });

        }else if(self.favorite == 1){
            self.favorite = 0 ;
            self.database.execSQL("UPDATE dict SET favorite = (?) WHERE id = (?)" ,[self.favorite , self.word.id] , function(err , db ){
                if(err){
                    console.log("error is == > " , err);
                }else{
                    console.log("Update Success");
                
                }
            });
        }*/
    };
    ListDetailComponent.prototype.myCheckFavorite = function (word_id) {
        var self = this;
        self.database.all("SELECT * FROM FAVORITE WHERE dict_no = (?)", [word_id]).then(function (rows) {
            if (rows == "") {
                self.myInsertFavorite(word_id);
            }
            else {
                self.myDeleteFavoite(word_id);
            }
        }, function (error) {
            console.log("SELECT ERROR ", error);
        });
    };
    ListDetailComponent.prototype.myInsertFavorite = function (word_id) {
        var self = this;
        self.database.execSQL("INSERT INTO FAVORITE (dict_no) VALUES (?)", [word_id]).then(function (word_insert) {
            console.log("INSERT RESULT => ", word_insert);
        }, function (error) {
            console.log("INSERT ERROR => ", error);
        });
    };
    ListDetailComponent.prototype.myDeleteFavoite = function (word_id) {
        var self = this;
        self.database.execSQL("DELETE FROM FAVORITE WHERE dict_no = (?)", [word_id]).then(function (word_delete) {
            console.log("DELETE RESULT => ", word_delete);
            self.myInsertFavorite(word_id);
        }, function (error) {
            console.log("DELETE ERROR => ", error);
        });
    };
    ListDetailComponent.prototype.myHistory = function () {
        var self = this;
        var word_id = self.word.id;
        self.myCheckHistory(word_id);
    };
    ListDetailComponent.prototype.myCheckHistory = function (word_id) {
        var self = this;
        self.database.all("SELECT * FROM HISTORY WHERE dict_no = (?)", [word_id]).then(function (rows) {
            if (rows == "") {
                self.myInsertHistory(word_id);
            }
            else {
                self.myDeleteHistory(word_id);
            }
        }, function (error) {
            console.log("SELECT ERROR ", error);
        });
    };
    ListDetailComponent.prototype.myDeleteHistory = function (word_id) {
        var self = this;
        self.database.execSQL("DELETE FROM HISTORY WHERE dict_no = (?)", [word_id]).then(function (word_delete) {
            console.log("DELETE RESULT => ", word_delete);
            self.myInsertHistory(word_id);
        }, function (error) {
            console.log("DELETE ERROR => ", error);
        });
    };
    ListDetailComponent.prototype.myInsertHistory = function (word_id) {
        var self = this;
        self.database.execSQL("INSERT INTO HISTORY (dict_no,dict_search) VALUES (?,?)", [word_id, self.word.dict_search]).then(function (word_insert) {
            console.log("INSERT RESULT => ", word_insert);
        }, function (error) {
            console.log("INSERT ERROR => ", error);
        });
    };
    ListDetailComponent.prototype.fetchJoin = function () {
        var self = this;
        console.log("go to fetch Join ");
        self.database.all("SELECT h.id, h.word_id , d.engWorld , d.thaiWorld , d.type FROM dict d join HISTORY h on d.id = h.word_id ORDER BY h.id DESC").then(function (rows) {
            for (var row in rows) {
                console.log("Result ==v");
                /*for(var i=0 ; i <= rows.length ; i++ ){
                    console.log("result ==>" , rows[row][i]);
                }*/
                console.log("result all ==> ", rows[row]); //result all
            }
        }, function (error) {
            console.log("SELECT ERROR ", error);
        });
    };
    ListDetailComponent.prototype.changWordType = function (arg) {
        console.log("changWordType == v");
        var word = arg;
        var wordIndexOf = word.indexOf("[");
        var wordLastIndexOf = word.lastIndexOf("]");
        console.log("word arg === > ", word);
        console.log("index of ===== > ", wordIndexOf);
        console.log("last Indexof ===== > ", wordLastIndexOf);
        if (wordIndexOf == 1 && wordLastIndexOf != -1) {
            console.log(" true v");
            return word;
        }
        else {
            console.log(" else v ");
            word = "[" + word + "]";
            return word;
        }
    };
    ListDetailComponent.prototype.sound_play = function () {
        console.log("Click Sound");
        var self = this;
        self.play_word.play();
    };
    ListDetailComponent.prototype.setButtonSound = function (arg) {
        console.log("Set button Sound");
        var self = this;
        var word = arg;
        var documents = fs.knownFolders.documents();
        var my_path = documents.getFolder("mySound");
        var filePath = fs.path.join(my_path.path, "test.mp3");
        http.getFile({ url: self.url,
            method: "GET",
            headers: {
                "Referer": 'http://translate.google.com/',
                "User-Agent": 'stagefright/1.2 (Linux;Android 5.0)',
                "Content-Type": 'audio/mpeg'
            }
        }, filePath).then(function (r) {
            //// Argument (response) is HttpResponse!
            console.log(JSON.stringify(r.path));
            self.play_word = sound.create(r.path);
        }, function (e) {
            console.log("error => ", e);
        });
    };
    return ListDetailComponent;
}(observable_1.Observable));
ListDetailComponent = __decorate([
    core_1.Component({
        selector: "ns-app",
        templateUrl: "views/list-detail/detail.html",
    }),
    __metadata("design:paramtypes", [router_1.ActivatedRoute])
], ListDetailComponent);
exports.ListDetailComponent = ListDetailComponent;
//# sourceMappingURL=data:application/json;base64,