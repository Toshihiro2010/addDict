"use strict";
var core_1 = require("@angular/core");
var router_1 = require("@angular/router");
var router_2 = require("nativescript-angular/router");
var http = require("http");
var Toast = require("nativescript-toast");
var LoginComponent = (function () {
    function LoginComponent(router, routerExtensions) {
        this.router = router;
        this.routerExtensions = routerExtensions;
        this.username = "";
        this.password = "";
        this.strURL = "http://192.9.9.112:30";
        var self = this;
    }
    LoginComponent.prototype.btnLogin = function () {
        var self = this;
        var checkEmpty = self.checkEmpty();
        console.log("empty word  ==>", checkEmpty);
        if (checkEmpty == true) {
            http.request({
                url: self.strURL + "/login/" + self.username + "/" + self.password,
                method: "GET"
            }).then(function (response) {
                var statusCode = response.statusCode;
                console.log("status code => ", statusCode);
                if (statusCode != 200) {
                    var toast = Toast.makeText("ไม่มี user และ password นี้ในระบบ");
                    toast.show();
                }
                else {
                    var obj = response.content.toJSON();
                    console.log(JSON.stringify(obj));
                    self.routerExtensions.navigate(["./main"], { clearHistory: true });
                } //end else statusCode
            }, function (e) {
                console.log("error is ", e);
            });
        } // End if checkEmpty
    };
    LoginComponent.prototype.myResultReturn = function () {
    };
    LoginComponent.prototype.btnCheck = function () {
        var self = this;
        var result;
        http.request({
            url: self.strURL + "/users/1",
            method: "GET"
        }).then(function (response) {
            var obj = response.content.toJSON();
            var statusCode = response.statusCode;
            console.log("status code => ", statusCode);
            console.log(JSON.stringify(obj));
        }, function (e) {
            console.log("error is ", e);
        });
    };
    LoginComponent.prototype.httpLogin = function () {
        console.log("on => http Login");
        var self = this;
    };
    LoginComponent.prototype.checkEmpty = function () {
        var self = this;
        console.log("username ===> ", self.username);
        console.log("password ===> ", self.password);
        if (self.username.trim() == "" || self.password.trim() == "") {
            var toast = Toast.makeText("มีช่องว่างนะไอ้โง่");
            toast.show();
            return false;
        }
        else {
            return true;
        }
    };
    return LoginComponent;
}());
LoginComponent = __decorate([
    core_1.Component({
        selector: "Login",
        templateUrl: "views/setting/login/login-component.html",
    }),
    __metadata("design:paramtypes", [router_1.Router, router_2.RouterExtensions])
], LoginComponent);
exports.LoginComponent = LoginComponent;
//# sourceMappingURL=data:application/json;base64,