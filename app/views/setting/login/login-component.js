"use strict";
var core_1 = require("@angular/core");
var router_1 = require("@angular/router");
var router_2 = require("nativescript-angular/router");
var users_1 = require("../../../models/users/users");
var http = require("http");
var Toast = require("nativescript-toast");
var Sqlite = require("nativescript-sqlite");
var LoginComponent = (function () {
    function LoginComponent(router, routerExtensions) {
        this.router = router;
        this.routerExtensions = routerExtensions;
        this.username = "";
        this.password = "";
        this.user = [];
        this.strURL = "http://192.9.9.112:30";
        var self = this;
        new Sqlite("dicts.db").then(function (db) {
            self.database = db;
            console.log("Open database Success");
        }, function (error) {
            console.log("Open DB ERROR", error);
        });
    }
    LoginComponent.prototype.btnLogin = function () {
        var self = this;
        var checkEmpty = self.checkEmpty();
        console.log("empty word  ==>", checkEmpty);
        if (checkEmpty == true) {
            http.request({
                url: self.strURL + "/login/" + self.username + "/" + self.password,
                method: "GET"
            }).then(function (response) {
                var statusCode = response.statusCode;
                console.log("status code => ", statusCode);
                if (statusCode != 200) {
                    var toast = Toast.makeText("ไม่มี user และ password นี้ในระบบ");
                    toast.show();
                }
                else {
                    var obj = response.content.toJSON();
                    //obj = JSON.stringify(obj);
                    self.objToDatabase(obj);
                } //end else statusCode
            }, function (e) {
                console.log("error is ", e);
            });
        } // End if checkEmpty
    };
    LoginComponent.prototype.objToDatabase = function (objUSer) {
        var self = this;
        console.log(objUSer);
        var model_user = new users_1.Users();
        model_user.id = objUSer[0].id;
        model_user.username = objUSer[0].username;
        model_user.name = objUSer[0].name;
        model_user.status = objUSer[0].status;
        self.user.push(model_user);
        console.log("object user stringdify => ", JSON.stringify(self.user));
        var temp_username = self.user[0].username;
        self.database.all("SELECT * FROM USERS WHERE username = (?)", [temp_username]).then(function (rows) {
            if (rows == "") {
                self.myInsertUser();
            }
            else {
                self.myChangUser(temp_username);
            }
        }, function (error) {
            console.log("SELECT ERROR ", error);
        });
    };
    LoginComponent.prototype.myInsertUser = function () {
        var self = this;
        console.log("My inert user =>");
        self.database.execSQL("INSERT INTO USERS (id , username , name , status , login ) VALUES (? , ? , ? , ? , ?)", [self.user[0].id, self.user[0].username, self.user[0].name, self.user[0].status, 1]).then(function (word_insert) {
            console.log("INSERT RESULT => ", word_insert);
        }, function (error) {
            console.log("INSERT ERROR => ", error);
        });
    };
    LoginComponent.prototype.myChangUser = function (arg) {
        console.log("My chang User => ", arg);
        var self = this;
        self.database.execSQL("UPDATE USERS SET login = 1 WHERE id = (?) ", [arg], function (err, db) {
            if (err) {
                console.log("error is == > ", err);
            }
            else {
                console.log("Update Success");
            }
        });
    };
    LoginComponent.prototype.btnCheck = function () {
        var self = this;
        var result;
        http.request({
            url: self.strURL + "/users/1",
            method: "GET"
        }).then(function (response) {
            var obj = response.content.toJSON();
            var statusCode = response.statusCode;
            console.log("status code => ", statusCode);
            console.log(JSON.stringify(obj));
        }, function (e) {
            console.log("error is ", e);
        });
    };
    LoginComponent.prototype.httpLogin = function () {
        console.log("on => http Login");
        var self = this;
    };
    LoginComponent.prototype.checkEmpty = function () {
        var self = this;
        console.log("username ===> ", self.username);
        console.log("password ===> ", self.password);
        if (self.username.trim() == "" || self.password.trim() == "") {
            var toast = Toast.makeText("มีช่องว่างนะไอ้โง่");
            toast.show();
            return false;
        }
        else {
            return true;
        }
    };
    return LoginComponent;
}());
LoginComponent = __decorate([
    core_1.Component({
        selector: "Login",
        templateUrl: "views/setting/login/login-component.html",
    }),
    __metadata("design:paramtypes", [router_1.Router, router_2.RouterExtensions])
], LoginComponent);
exports.LoginComponent = LoginComponent;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9naW4tY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsibG9naW4tY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxzQ0FBMEM7QUFFMUMsMENBQW1FO0FBQ25FLHNEQUErRDtBQUMvRCxxREFBb0Q7QUFHcEQsSUFBSSxJQUFJLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBQzNCLElBQUksS0FBSyxHQUFHLE9BQU8sQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDO0FBQzFDLElBQUksTUFBTSxHQUFHLE9BQU8sQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDO0FBTzVDLElBQWEsY0FBYztJQVV2Qix3QkFBb0IsTUFBYyxFQUFXLGdCQUFtQztRQUE1RCxXQUFNLEdBQU4sTUFBTSxDQUFRO1FBQVcscUJBQWdCLEdBQWhCLGdCQUFnQixDQUFtQjtRQVJ4RSxhQUFRLEdBQVksRUFBRSxDQUFFO1FBQ3hCLGFBQVEsR0FBWSxFQUFFLENBQUU7UUFHeEIsU0FBSSxHQUFHLEVBQUUsQ0FBRTtRQUVYLFdBQU0sR0FBWSx1QkFBdUIsQ0FBQztRQUc5QyxJQUFJLElBQUksR0FBRyxJQUFJLENBQUM7UUFDaEIsSUFBSSxNQUFNLENBQUMsVUFBVSxDQUFDLENBQUMsSUFBSSxDQUFDLFVBQUEsRUFBRTtZQUMxQixJQUFJLENBQUMsUUFBUSxHQUFHLEVBQUUsQ0FBQztZQUNuQixPQUFPLENBQUMsR0FBRyxDQUFDLHVCQUF1QixDQUFDLENBQUM7UUFDekMsQ0FBQyxFQUFDLFVBQUEsS0FBSztZQUNILE9BQU8sQ0FBQyxHQUFHLENBQUMsZUFBZSxFQUFHLEtBQUssQ0FBQyxDQUFDO1FBQ3pDLENBQUMsQ0FBQyxDQUFBO0lBRU4sQ0FBQztJQUVPLGlDQUFRLEdBQWhCO1FBQ0ksSUFBSSxJQUFJLEdBQUcsSUFBSSxDQUFDO1FBQ2hCLElBQUksVUFBVSxHQUFHLElBQUksQ0FBQyxVQUFVLEVBQUUsQ0FBQztRQUNuQyxPQUFPLENBQUMsR0FB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RCxJQUFJLEtBQUssR0FBRyxLQUFLLENBQUMsUUFBUSxDQUFDLG9CQUFvQixDQUFDLENBQUM7WUFDakQsS0FBSyxDQUFDLElBQUksRUFBRSxDQUFDO1lBQ2IsTUFBTSxDQUFDLEtBQUssQ0FBQztRQUNqQixDQUFDO1FBQUEsSUFBSSxDQUFBLENBQUM7WUFDRixNQUFNLENBQUMsSUFBSSxDQUFDO1FBQ2hCLENBQUM7SUFFTCxDQUFDO0lBSUwscUJBQUM7QUFBRCxDQUFDLEFBdEpELElBc0pDO0FBdEpZLGNBQWM7SUFKMUIsZ0JBQVMsQ0FBQztRQUNQLFFBQVEsRUFBRSxPQUFPO1FBQ2pCLFdBQVcsRUFBRSwwQ0FBMEM7S0FDMUQsQ0FBQztxQ0FXOEIsZUFBTSxFQUE4Qix5QkFBZ0I7R0FWdkUsY0FBYyxDQXNKMUI7QUF0Slksd0NBQWMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQgfSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xyXG5pbXBvcnQgeyBVc2VyIH0gZnJvbSBcIi4uLy4uLy4uL3NoYXJlZC9teUZ1bmN0aW9uMVwiO1xyXG5pbXBvcnQgeyBSb3V0ZXIsIE5hdmlnYXRpb25FeHRyYXMgLCBSb3V0ZSB9IGZyb20gXCJAYW5ndWxhci9yb3V0ZXJcIjsgXHJcbmltcG9ydCB7IFJvdXRlckV4dGVuc2lvbnMgfSBmcm9tIFwibmF0aXZlc2NyaXB0LWFuZ3VsYXIvcm91dGVyXCI7XHJcbmltcG9ydCB7IFVzZXJzIH0gZnJvbSBcIi4uLy4uLy4uL21vZGVscy91c2Vycy91c2Vyc1wiO1xyXG5cclxuXHJcbnZhciBodHRwID0gcmVxdWlyZShcImh0dHBcIik7XHJcbnZhciBUb2FzdCA9IHJlcXVpcmUoXCJuYXRpdmVzY3JpcHQtdG9hc3RcIik7XHJcbnZhciBTcWxpdGUgPSByZXF1aXJlKFwibmF0aXZlc2NyaXB0LXNxbGl0ZVwiKTtcclxuXHJcblxyXG5AQ29tcG9uZW50KHtcclxuICAgIHNlbGVjdG9yOiBcIkxvZ2luXCIsXHJcbiAgICB0ZW1wbGF0ZVVybDogXCJ2aWV3cy9zZXR0aW5nL2xvZ2luL2xvZ2luLWNvbXBvbmVudC5odG1sXCIsXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBMb2dpbkNvbXBvbmVudCB7XHJcblxyXG4gICAgcHJpdmF0ZSB1c2VybmFtZSA6IHN0cmluZyA9IFwiXCIgO1xyXG4gICAgcHJpdmF0ZSBwYXNzd29yZCA6IHN0cmluZyA9IFwiXCIgO1xyXG4gICAgcHJpdmF0ZSBkYXRhYmFzZSA6IGFueTtcclxuXHJcbiAgICBwcml2YXRlIHVzZXIgPSBbXSA7XHJcblxyXG4gICAgcHJpdmF0ZSBzdHJVUkwgOiBzdHJpbmcgPSBcImh0dHA6Ly8xOTIuOS45LjExMjozMFwiO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgcm91dGVyOiBSb3V0ZXIgLCBwcml2YXRlIHJvdXRlckV4dGVuc2lvbnMgOiBSb3V0ZXJFeHRlbnNpb25zICl7XHJcbiAgICAgICAgbGV0IHNlbGYgPSB0aGlzO1xyXG4gICAgICAgIG5ldyBTcWxpdGUoXCJkaWN0cy5kYlwiKS50aGVuKGRiID0+e1xyXG4gICAgICAgICAgICBzZWxmLmRhdGFiYXNlID0gZGI7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiT3BlbiBkYXRhYmFzZSBTdWNjZXNzXCIpO1xyXG4gICAgICAgIH0sZXJyb3IgPT57XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiT3BlbiBEQiBFUlJPUlwiICwgZXJyb3IpO1xyXG4gICAgICAgIH0pXHJcbiAgICAgICAgXHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBidG5Mb2dpbigpe1xyXG4gICAgICAgIGxldCBzZWxmID0gdGhpcztcclxuICAgICAgICB2YXIgY2hlY2tFbXB0eSA9IHNlbGYuY2hlY2tFbXB0eSgpO1xyXG4gICAgICAgIGNvbnNvbGUubG9nKFwiZW1wdHkgd29yZCAgPT0+XCIgLCBjaGVja0VtcHR5KTtcclxuICAgICAgICBpZiggY2hlY2tFbXB0eSA9PSB0cnVlKXtcclxuXHJcbiAgICAgICAgICAgIGh0dHAucmVxdWVzdCh7IFxyXG4gICAgICAgICAgICAgICAgdXJsOiBzZWxmLnN0clVSTCArXCIvbG9naW4vXCIrIHNlbGYudXNlcm5hbWUgKyBcIi9cIitzZWxmLnBhc3N3b3JkLCBcclxuICAgICAgICAgICAgICAgIG1ldGhvZDogXCJHRVRcIiBcclxuICAgICAgICAgICAgfSkudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHtcclxuXHJcbiAgICAgICAgICAgICAgICB2YXIgc3RhdHVzQ29kZSA9IHJlc3BvbnNlLnN0YXR1c0NvZGU7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcInN0YXR1cyBjb2RlID0+IFwiICwgc3RhdHVzQ29kZSk7XHJcbiAgICAgICAgICAgICAgICBpZihzdGF0dXNDb2RlICE9IDIwMCl7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRvYXN0ID0gVG9hc3QubWFrZVRleHQoXCLguYTguKHguYjguKHguLUgdXNlciDguYHguKXguLAgcGFzc3dvcmQg4LiZ4Li14LmJ4LmD4LiZ4Lij4Liw4Lia4LiaXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRvYXN0LnNob3coKTtcclxuICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIH1lbHNle1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBvYmogPSByZXNwb25zZS5jb250ZW50LnRvSlNPTigpO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vb2JqID0gSlNPTi5zdHJpbmdpZnkob2JqKTtcclxuICAgICAgICAgICAgICAgICAgICBzZWxmLm9ialRvRGF0YWJhc2Uob2JqKTtcclxuICAgICAgICAgICAgICAgICAgICAvL3NlbGYucm91dGVyRXh0ZW5zaW9ucy5uYXZpZ2F0ZShbXCIuL21haW5cIl0sIHsgY2xlYXJIaXN0b3J5OiB0cnVlIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vc2VsZi5yb3V0ZXJFeHRlbnNpb25zLm5hdmlnYXRlKFtcInVzZXIvbGlzdFwiXSwgeyBjbGVhckhpc3Rvcnk6IHRydWUgfSk7XHJcbiAgICAgICAgICAgICAgICB9Ly9lbmQgZWxzZSBzdGF0dXNDb2RlXHJcbiAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgfSwgZnVuY3Rpb24gKGUpIHsvLy8vIEFyZ3VtZW50IChlKSBpcyBFcnJvciFcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiZXJyb3IgaXMgXCIgLCBlKTsgIFxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9Ly8gRW5kIGlmIGNoZWNrRW1wdHlcclxuICAgICAgICBcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIG9ialRvRGF0YWJhc2Uob2JqVVNlcil7XHJcbiAgICAgICAgbGV0IHNlbGYgPSB0aGlzO1xyXG4gICAgICAgIGNvbnNvbGUubG9nKG9ialVTZXIpO1xyXG4gICAgICAgIFxyXG4gICAgICAgIGxldCBtb2RlbF91c2VyID0gbmV3IFVzZXJzKCk7XHJcbiAgICAgICAgbW9kZWxfdXNlci5pZCA9IG9ialVTZXJbMF0uaWQ7XHJcbiAgICAgICAgbW9kZWxfdXNlci51c2VybmFtZSA9IG9ialVTZXJbMF0udXNlcm5hbWU7XHJcbiAgICAgICAgbW9kZWxfdXNlci5uYW1lID0gb2JqVVNlclswXS5uYW1lO1xyXG4gICAgICAgIG1vZGVsX3VzZXIuc3RhdHVzID0gb2JqVVNlclswXS5zdGF0dXM7XHJcbiAgICAgICAgXHJcbiAgICAgICAgc2VsZi51c2VyLnB1c2gobW9kZWxfdXNlcik7XHJcbiAgICAgICAgY29uc29sZS5sb2coXCJvYmplY3QgdXNlciBzdHJpbmdkaWZ5ID0+IFwiICwgSlNPTi5zdHJpbmdpZnkoc2VsZi51c2VyKSk7XHJcbiAgICAgICAgbGV0IHRlbXBfdXNlcm5hbWUgPSBzZWxmLnVzZXJbMF0udXNlcm5hbWU7XHJcblxyXG4gICAgICAgIHNlbGYuZGF0YWJhc2UuYWxsKFwiU0VMRUNUICogRlJPTSBVU0VSUyBXSEVSRSB1c2VybmFtZSA9ICg/KVwiLFt0ZW1wX3VzZXJuYW1lXSkudGhlbihyb3dzID0+e1xyXG4gICAgICAgICAgICBpZihyb3dzID09XCJcIil7XHJcbiAgICAgICAgICAgICAgICBzZWxmLm15SW5zZXJ0VXNlcigpO1xyXG4gICAgICAgICAgICB9ZWxzZXtcclxuICAgICAgICAgICAgICAgIHNlbGYubXlDaGFuZ1VzZXIodGVtcF91c2VybmFtZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LGVycm9yID0+e1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcIlNFTEVDVCBFUlJPUiBcIiAsIGVycm9yKTtcclxuICAgICAgICB9KVxyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgbXlJbnNlcnRVc2VyKCl7XHJcbiAgICAgICAgbGV0IHNlbGYgPSB0aGlzO1xyXG4gICAgICAgIGNvbnNvbGUubG9nKFwiTXkgaW5lcnQgdXNlciA9PlwiKTtcclxuICAgICAgICBzZWxmLmRhdGFiYXNlLmV4ZWNTUUwoXCJJTlNFUlQgSU5UTyBVU0VSUyAoaWQgLCB1c2VybmFtZSAsIG5hbWUgLCBzdGF0dXMgLCBsb2dpbiApIFZBTFVFUyAoPyAsID8gLCA/ICwgPyAsID8pXCIsIFxyXG4gICAgICAgIFtzZWxmLnVzZXJbMF0uaWQgLHNlbGYudXNlclswXS51c2VybmFtZSAsIHNlbGYudXNlclswXS5uYW1lICwgc2VsZi51c2VyWzBdLnN0YXR1cyAsIDEgXSkudGhlbih3b3JkX2luc2VydCA9PiB7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIklOU0VSVCBSRVNVTFQgPT4gXCIgLCB3b3JkX2luc2VydCAgKTtcclxuICAgICAgICAgICAgICAgIH0sIGVycm9yID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIklOU0VSVCBFUlJPUiA9PiBcIiAsIGVycm9yKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICApO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgbXlDaGFuZ1VzZXIoYXJnKXtcclxuICAgICAgICBjb25zb2xlLmxvZyhcIk15IGNoYW5nIFVzZXIgPT4gXCIgLCBhcmcpO1xyXG4gICAgICAgIGxldCBzZWxmID0gdGhpcztcclxuICAgICAgICBcclxuICAgICAgICBzZWxmLmRhdGFiYXNlLmV4ZWNTUUwoXCJVUERBVEUgVVNFUlMgU0VUIGxvZ2luID0gMSBXSEVSRSBpZCA9ICg/KSBcIiAsW2FyZ10gLCBmdW5jdGlvbihlcnIgLCBkYiApe1xyXG4gICAgICAgICAgICBpZihlcnIpe1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJlcnJvciBpcyA9PSA+IFwiICwgZXJyKTtcclxuICAgICAgICAgICAgfWVsc2V7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIlVwZGF0ZSBTdWNjZXNzXCIpO1xyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcblxyXG4gICAgcHJpdmF0ZSBidG5DaGVjaygpe1xyXG4gICAgICAgIGxldCBzZWxmID0gdGhpcztcclxuICAgICAgICB2YXIgcmVzdWx0O1xyXG4gICAgICAgIGh0dHAucmVxdWVzdCh7IFxyXG4gICAgICAgICAgICAgICAgdXJsOiBzZWxmLnN0clVSTCArXCIvdXNlcnMvMVwiICwgXHJcbiAgICAgICAgICAgICAgICBtZXRob2Q6IFwiR0VUXCIgXHJcbiAgICAgICAgfSkudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgdmFyIG9iaiA9IHJlc3BvbnNlLmNvbnRlbnQudG9KU09OKCk7XHJcbiAgICAgICAgICAgIHZhciBzdGF0dXNDb2RlID0gcmVzcG9uc2Uuc3RhdHVzQ29kZTtcclxuXHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwic3RhdHVzIGNvZGUgPT4gXCIgLCBzdGF0dXNDb2RlKTtcclxuICAgICAgICAgICAgY29uc29sZS5sb2coSlNPTi5zdHJpbmdpZnkob2JqKSk7XHJcblxyXG4gICAgICAgIH0sIGZ1bmN0aW9uIChlKSB7Ly8vLyBBcmd1bWVudCAoZSkgaXMgRXJyb3IhXHJcblxyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcImVycm9yIGlzIFwiICwgZSk7ICBcclxuICAgICAgICB9KTtcclxuXHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBodHRwTG9naW4oKXtcclxuICAgICAgICBjb25zb2xlLmxvZyhcIm9uID0+IGh0dHAgTG9naW5cIik7XHJcbiAgICAgICAgbGV0IHNlbGYgPSB0aGlzO1xyXG5cclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIGNoZWNrRW1wdHkoKXtcclxuICAgICAgICBsZXQgc2VsZiA9IHRoaXM7XHJcbiAgICAgICAgY29uc29sZS5sb2coXCJ1c2VybmFtZSA9PT0+IFwiICwgc2VsZi51c2VybmFtZSApO1xyXG4gICAgICAgIGNvbnNvbGUubG9nKFwicGFzc3dvcmQgPT09PiBcIiAsIHNlbGYucGFzc3dvcmQpO1xyXG5cclxuICAgICAgICBpZihzZWxmLnVzZXJuYW1lLnRyaW0oKSA9PSBcIlwiIHx8IHNlbGYucGFzc3dvcmQudHJpbSgpID09XCJcIil7XHJcbiAgICAgICAgIFxyXG4gICAgICAgICAgICB2YXIgdG9hc3QgPSBUb2FzdC5tYWtlVGV4dChcIuC4oeC4teC4iuC5iOC4reC4h+C4p+C5iOC4suC4h+C4meC4sOC5hOC4reC5ieC5guC4h+C5iFwiKTtcclxuICAgICAgICAgICAgdG9hc3Quc2hvdygpO1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfWVsc2V7XHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBcclxuICAgIH1cclxuXHJcblxyXG5cclxufVxyXG4iXX0=