"use strict";
var core_1 = require("@angular/core");
var router_1 = require("@angular/router");
var item_1 = require("../models/items/item");
var Sqlite = require("nativescript-sqlite");
var ViewComponent = (function () {
    function ViewComponent(router) {
        var _this = this;
        this.router = router;
        this.eng_rand = "";
        this.thai_rand = "";
        this.type_rand = "";
        this.word_search = "";
        this.word_list = [];
        this.word_list2 = [];
        //Code ตอนที่ไม่มีอะไรเลย เริ่มสร้างจาก 1
        (new Sqlite("dicts.db")).then(function (db) {
            db.execSQL("CREATE TABLE IF NOT EXISTS dict (id INTEGER PRIMARY KEY AUTOINCREMENT, engWorld TEXT, thaiWorld TEXT ,type TEXT DEFAULT 'Noun' , sTime DATE DEFAULT Null )").then(function (id) {
                _this.database = db;
                console.log("CREAT TABLE ===> Success ");
                //this.insert();
                _this.fetch();
                db.execSQL("CREATE TABLE IF NOT EXISTS FAVORITE (id INTEGER PRIMARY KEY AUTOINCREMENT,word_id INTEGER)").then(function (id) {
                    _this.database = db;
                    console.log("CREATE FAVORITE Success");
                    _this.createHistory();
                    _this.btnSelectRandom();
                }, function (error) {
                    console.log("CREATE TABLE FAVORITE ERROR", error);
                });
            }, function (error) {
                console.log("CREATE TABLE ERROR", error);
            });
        }, function (error) {
            console.log("OPEN DB ERROR", error);
        });
        //เรียกใช้ database ที่มีอยู่แล้วชื่อ dicts.db
        /*new Sqlite("dicts.db").then(db =>{
            this.database = db;
            console.log("Open database Success")
            
        },error =>{
            console.log("Open DB ERROR" , error);
        })
        */
        //this.btnSelectRandom();
        //this.items = new Item();
    }
    ViewComponent.prototype.createHistory = function () {
        var _this = this;
        this.database.execSQL("CREATE TABLE IF NOT EXISTS HISTORY (id INTEGER PRIMARY KEY AUTOINCREMENT,word_id INTEGER ,sTime DATE)").then(function (id) {
            _this.database = _this.database;
            console.log("CREATE HISTORY Success");
        }, function (error) {
            console.log("CREATE TABLE HISTORY ERROR", error);
        });
    };
    ViewComponent.prototype.insert = function () {
        var _this = this;
        this.database.execSQL("INSERT INTO dict (engWorld, thaiWorld) VALUES (?,?)", ["red", "แดง"]).then(function (all_word) {
            console.log("INSERT RESULT => ", all_word);
            _this.fetch();
        }, function (error) {
            console.log("INSERT ERROR => ", error);
        });
    };
    ViewComponent.prototype.fetch = function () {
        var _this = this;
        console.log("Go to ===> fetch");
        this.database.all("SELECT * FROM dict").then(function (rows) {
            console.log(rows);
            _this.word_list = rows;
            /*for(var row in rows){
                console.log("Result ==v");
            
                console.log("result all ==> " , rows[row]);//result all
                console.log("eng_word ==> " , rows[row][1]); // result eng
                console.log("thai_word ==> " , rows[row][2]); //result thai
                console.log("type word ==> " , rows[row][3]); //result thai
            }*/
            for (var i = 0; i < rows.length; i++) {
                console.log("result ==>", rows[i]);
            }
        }, function (error) {
            console.log("SELECT ERROR ", error);
        });
    };
    ViewComponent.prototype.btnInsert = function () {
        console.log("click btnInsert");
        this.router.navigate(["insert"]), {
            transition: {
                name: "flip",
                dutation: 2000,
                curve: "linear"
            }
        };
        this.btnSelectRandom();
    };
    ViewComponent.prototype.btnSelect = function () {
        var _this = this;
        var search = this.word_search;
        if (search == "") {
            alert("มีช่องว่างนะไอ้โง่ .....");
        }
        else {
            console.log("Check ==> ", "Select ===> " + search);
            var temp = "%" + search + "%";
            this.database.all("SELECT * FROM dict WHERE engWorld LIKE (?) or thaiWorld LIKE (?)", [temp, temp]).then(function (rows) {
                if (rows == "") {
                    console.log("not word ===>  " + rows + "is " + search);
                    alert("ไม่มีคำว่า " + search + " ในฐานข้อมูล");
                }
                _this.word_list = rows;
                for (var row in rows) {
                    console.log("Result ==v");
                    /*for(var i=0 ; i <= rows.length ; i++ ){
                     console.log("result ==>" , rows[row][i]);
                    }*/
                    console.log("result all ==> ", rows[row]); //result all
                    console.log("eng_word ==> ", rows[row][1]); // result eng
                    console.log("thai_word ==> ", rows[row][2]); //result thai
                }
            }, function (error) {
                console.log("SELECT ERROR ", error);
            });
        }
    };
    ViewComponent.prototype.btnDelete = function () {
        console.log("Check == > ", " Delete");
        this.router.navigate(["delete"]), {};
        this.btnSelectRandom();
    };
    //  function use for listview
    ViewComponent.prototype.ngOnInit = function () {
        var self = this;
        self.getItem();
    };
    ViewComponent.prototype.onItemTap = function (args) {
        var self = this;
        var word = self.word_list2[args.index];
        //this.router.navigate(["view-list", word.id]);
        //console.log("------------------------ ItemTapped: " + args.index);
        console.log(JSON.stringify(word));
        var navigationExtras = {
            queryParams: {
                "word": JSON.stringify(word)
            }
        };
        this.router.navigate(["list-detail"], navigationExtras);
    };
    ViewComponent.prototype.getItem = function () {
        console.log("GET ITEM ================> ");
        var self = this;
        var temp_list;
        temp_list = self.word_list;
        console.log("temp_list ===== > ", temp_list);
        console.log("temp_list ===== > ", temp_list.length);
        for (var row in temp_list) {
            console.log(temp_list[row]);
            var model_item = new item_1.Item();
            model_item.id = temp_list[row][0];
            model_item.wordEng = temp_list[row][1];
            model_item.wordThai = temp_list[row][2];
            console.log(temp_list[row][0] + " " + temp_list[row][1] + " " + temp_list[row][2]);
            self.word_list2.push(model_item);
        }
    };
    ViewComponent.prototype.btnSelectRandom = function () {
        //console.log("Select Random");
        var _this = this;
        this.database.all("SELECT * FROM dict ORDER BY RANDOM() LIMIT 1").then(function (rows) {
            console.log(rows);
            console.log("eng_word ==> ", rows[0][1]); // result eng
            _this.eng_rand = rows[0][1];
            //this.items.wordEng = rows[0][1];
            //console.log("eng_word ITEM ==> " , this.items.wordEng); // result eng
            console.log("thai_word ==> ", rows[0][2]); //result thai
            _this.thai_rand = rows[0][2];
            //this.items.wordThai = rows[0][2];
            //console.log("eng_thai ITEM ==> " , this.items.wordThai); // result eng
            console.log("type word ==> ", rows[0][3]); //result type
            _this.type_rand = rows[0][3];
            //this.items.wordType = rows[0][3];
            //console.log("eng_type ITEM ==> " , this.items.wordType); // result eng
            /*for(var row in rows){
                console.log("Result ==v");
            
                console.log("result all ==> " , rows[0][0]);//result all

                console.log("eng_word ==> " , rows[row][1]); // result eng
                this.eng_rand = rows[row][1];
            
                console.log("thai_word ==> " , rows[row][2]); //result thai
                this.thai_rand = rows[row][2];


                console.log("type word ==> " , rows[row][3]); //result type
                this.type_rand = rows[row][3];
            }*/
            /*for(var i=0 ; i < rows.length ; i++ ){
                    console.log("result for row ==>" , rows[i]);
                }*/
            //this.eng_rand = rows[1];
        }, function (error) {
            console.log("SELECT ERROR ", error);
        });
    };
    return ViewComponent;
}());
ViewComponent = __decorate([
    core_1.Component({
        selector: "ns-app",
        templateUrl: "views/main.html",
    }),
    __metadata("design:paramtypes", [router_1.Router])
], ViewComponent);
exports.ViewComponent = ViewComponent;
//# sourceMappingURL=data:application/json;base64,