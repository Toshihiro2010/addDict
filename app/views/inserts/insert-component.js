"use strict";
var core_1 = require("@angular/core");
var Sqlite = require("nativescript-sqlite");
var Toast = require("nativescript-toast");
var Inserts = (function () {
    function Inserts() {
        var _this = this;
        this.eng_word = "";
        this.thai_word = "";
        new Sqlite("dicts.db").then(function (db) {
            _this.database = db;
            console.log("Open database Success");
        }, function (error) {
            console.log("Open DB ERROR", error);
        });
    }
    Inserts.prototype.btnInsert = function () {
        console.log("Check click ==>");
        console.log("eng_word ======> " + this.eng_word);
        console.log("thai_word ======> " + this.thai_word);
        //TODO insert Thai_word , eng_word
        if (this.eng_word == "" || this.thai_word == "") {
            var toast = Toast.makeText("มีช่องว่างนะไอ้โง่");
            toast.show();
        }
        else {
            this.database.execSQL("INSERT INTO dict (engWorld, thaiWorld) VALUES (?,?)", [this.eng_word, this.thai_word]).then(function (all_word) {
                console.log("INSERT RESULT => ", all_word);
            }, function (error) {
                console.log("INSERT ERROR => ", error);
            });
            console.log("Not Empty");
            alert("คุณได้เพิ่ม " + this.eng_word + " เรียบร้อยแล้ว");
            this.eng_word = "";
            this.thai_word = "";
        }
    };
    return Inserts;
}());
Inserts = __decorate([
    core_1.Component({
        selector: "Inserts",
        templateUrl: "views/inserts/insert-component.html",
    }),
    __metadata("design:paramtypes", [])
], Inserts);
exports.Inserts = Inserts;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5zZXJ0LWNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImluc2VydC1jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLHNDQUEwQztBQUkxQyxJQUFJLE1BQU0sR0FBRyxPQUFPLENBQUMscUJBQXFCLENBQUMsQ0FBQztBQUM1QyxJQUFJLEtBQUssR0FBRyxPQUFPLENBQUMsb0JBQW9CLENBQUMsQ0FBQztBQU8xQyxJQUFhLE9BQU87SUFRaEI7UUFBQSxpQkFTQztRQWJELGFBQVEsR0FBQyxFQUFFLENBQUM7UUFDWixjQUFTLEdBQUMsRUFBRSxDQUFDO1FBSVQsSUFBSSxNQUFNLENBQUMsVUFBVSxDQUFDLENBQUMsSUFBSSxDQUFDLFVBQUEsRUFBRTtZQUMxQixLQUFJLENBQUMsUUFBUSxHQUFHLEVBQUUsQ0FBQztZQUNuQixPQUFPLENBQUMsR0FBRyxDQUFDLHVCQUF1QixDQUFDLENBQUM7UUFFekMsQ0FBQyxFQUFDLFVBQUEsS0FBSztZQUNILE9BQU8sQ0FBQyxHQUFHLENBQUMsZUFBZSxFQUFHLEtBQUssQ0FBQyxDQUFDO1FBQ3pDLENBQUMsQ0FBQyxDQUFBO0lBRU4sQ0FBQztJQUlELDJCQUFTLEdBQVQ7UUFDSSxPQUFPLENBQUMsR0FBRyxDQUFDLGlCQUFpQixDQUFDLENBQUM7UUFDL0IsT0FBTyxDQUFDLEdBQUcsQ0FBQyxtQkFBbUIsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDakQsT0FBTyxDQUFDLEdBQUcsQ0FBQyxvQkFBb0IsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7UUFDbkQsa0NBQWtDO1FBRWxDLEVBQUUsQ0FBQSxDQUFDLElBQUksQ0FBQyxRQUFRLElBQUcsRUFBRSxJQUFJLElBQUksQ0FBQyxTQUFTLElBQUcsRUFBRyxDQUFDLENBQUEsQ0FBQztZQUMzQyxJQUFJLEtBQUssR0FBRyxLQUFLLENBQUMsUUFBUSxDQUFDLG9CQUFvQixDQUFDLENBQUM7WUFDakQsS0FBSyxDQUFDLElBQUksRUFBRSxDQUFDO1FBQ2pCLENBQUM7UUFBQSxJQUFJLENBQUEsQ0FBQztZQUNGLElBQUksQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLHFEQUFxRCxFQUFFLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsVUFBQSxRQUFRO2dCQUN2SCxPQUFPLENBQUMsR0FBRyxDQUFDLG1CQUFtQixFQUFHLFFBQVEsQ0FBRyxDQUFDO1lBQzlDLENBQUMsRUFBRSxVQUFBLEtBQUs7Z0JBQ0osT0FBTyxDQUFDLEdBQUcsQ0FBQyxrQkFBa0IsRUFBRyxLQUFLLENBQUMsQ0FBQztZQUM1QyxDQUFDLENBQ0osQ0FBQztZQUNGLE9BQU8sQ0FBQyxHQUFHLENBQUMsV0FBVyxDQUFDLENBQUM7WUFFekIsS0FBSyxDQUFDLGNBQWMsR0FBRyxJQUFJLENBQUMsUUFBUSxHQUFHLGdCQUFnQixDQUFDLENBQUM7WUFFekQsSUFBSSxDQUFDLFFBQVEsR0FBRSxFQUFFLENBQUM7WUFDbEIsSUFBSSxDQUFDLFNBQVMsR0FBQyxFQUFFLENBQUM7UUFDdEIsQ0FBQztJQUNMLENBQUM7SUFNTCxjQUFDO0FBQUQsQ0FBQyxBQWxERCxJQWtEQztBQWxEWSxPQUFPO0lBSm5CLGdCQUFTLENBQUM7UUFDUCxRQUFRLEVBQUUsU0FBUztRQUNuQixXQUFXLEVBQUUscUNBQXFDO0tBQ3JELENBQUM7O0dBQ1csT0FBTyxDQWtEbkI7QUFsRFksMEJBQU8iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQgfSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xyXG5pbXBvcnQgeyBSb3V0ZSB9IGZyb20gXCJAYW5ndWxhci9yb3V0ZXJcIjtcclxuXHJcblxyXG52YXIgU3FsaXRlID0gcmVxdWlyZShcIm5hdGl2ZXNjcmlwdC1zcWxpdGVcIik7XHJcbnZhciBUb2FzdCA9IHJlcXVpcmUoXCJuYXRpdmVzY3JpcHQtdG9hc3RcIik7XHJcblxyXG5cclxuQENvbXBvbmVudCh7XHJcbiAgICBzZWxlY3RvcjogXCJJbnNlcnRzXCIsXHJcbiAgICB0ZW1wbGF0ZVVybDogXCJ2aWV3cy9pbnNlcnRzL2luc2VydC1jb21wb25lbnQuaHRtbFwiLFxyXG59KVxyXG5leHBvcnQgY2xhc3MgSW5zZXJ0cyB7XHJcbiAgICBcclxuICAgIFxyXG4gICAgcHJpdmF0ZSBkYXRhYmFzZSA6YW55O1xyXG4gICAgZW5nX3dvcmQ9XCJcIjtcclxuICAgIHRoYWlfd29yZD1cIlwiO1xyXG5cclxuXHJcbiAgICBjb25zdHJ1Y3Rvcigpe1xyXG4gICAgICAgIG5ldyBTcWxpdGUoXCJkaWN0cy5kYlwiKS50aGVuKGRiID0+e1xyXG4gICAgICAgICAgICB0aGlzLmRhdGFiYXNlID0gZGI7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiT3BlbiBkYXRhYmFzZSBTdWNjZXNzXCIpO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICB9LGVycm9yID0+e1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcIk9wZW4gREIgRVJST1JcIiAsIGVycm9yKTtcclxuICAgICAgICB9KVxyXG5cclxuICAgIH1cclxuXHJcblxyXG5cclxuICAgIGJ0bkluc2VydCgpe1xyXG4gICAgICAgIGNvbnNvbGUubG9nKFwiQ2hlY2sgY2xpY2sgPT0+XCIpO1xyXG4gICAgICAgIGNvbnNvbGUubG9nKFwiZW5nX3dvcmQgPT09PT09PiBcIiArIHRoaXMuZW5nX3dvcmQpO1xyXG4gICAgICAgIGNvbnNvbGUubG9nKFwidGhhaV93b3JkID09PT09PT4gXCIgKyB0aGlzLnRoYWlfd29yZCk7XHJcbiAgICAgICAgLy9UT0RPIGluc2VydCBUaGFpX3dvcmQgLCBlbmdfd29yZFxyXG5cclxuICAgICAgICBpZih0aGlzLmVuZ193b3JkID09XCJcIiB8fCB0aGlzLnRoYWlfd29yZCA9PVwiXCIgKXtcclxuICAgICAgICAgICAgdmFyIHRvYXN0ID0gVG9hc3QubWFrZVRleHQoXCLguKHguLXguIrguYjguK3guIfguKfguYjguLLguIfguJnguLDguYTguK3guYnguYLguIfguYhcIik7XHJcbiAgICAgICAgICAgIHRvYXN0LnNob3coKTtcclxuICAgICAgICB9ZWxzZXtcclxuICAgICAgICAgICAgdGhpcy5kYXRhYmFzZS5leGVjU1FMKFwiSU5TRVJUIElOVE8gZGljdCAoZW5nV29ybGQsIHRoYWlXb3JsZCkgVkFMVUVTICg/LD8pXCIsIFt0aGlzLmVuZ193b3JkICx0aGlzLnRoYWlfd29yZF0pLnRoZW4oYWxsX3dvcmQgPT4ge1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJJTlNFUlQgUkVTVUxUID0+IFwiICwgYWxsX3dvcmQgICk7XHJcbiAgICAgICAgICAgICAgICB9LCBlcnJvciA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJJTlNFUlQgRVJST1IgPT4gXCIgLCBlcnJvcik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiTm90IEVtcHR5XCIpO1xyXG5cclxuICAgICAgICAgICAgYWxlcnQoXCLguITguLjguJPguYTguJTguYnguYDguJ7guLTguYjguKEgXCIgKyB0aGlzLmVuZ193b3JkICsgXCIg4LmA4Lij4Li14Lii4Lia4Lij4LmJ4Lit4Lii4LmB4Lil4LmJ4LinXCIpO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5lbmdfd29yZCA9XCJcIjtcclxuICAgICAgICAgICAgdGhpcy50aGFpX3dvcmQ9XCJcIjsgICBcclxuICAgICAgICB9ICAgXHJcbiAgICB9XHJcblxyXG4gIFxyXG5cclxuICAgIFxyXG5cclxufVxyXG4iXX0=