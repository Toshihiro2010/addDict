"use strict";
var core_1 = require("@angular/core");
var item_1 = require("./../../models/items/item");
var Sqlite = require("nativescript-sqlite");
var Toast = require("nativescript-toast");
var FavoriteComponent = (function () {
    function FavoriteComponent() {
        this.word_sql = []; // out put on sql
        this.show_list = []; // show list on layouts
        var self = this;
        new Sqlite("dicts.db").then(function (db) {
            self.database = db;
            console.log("Open database Success");
            self.mySqlfetch();
        }, function (error) {
            console.log("Open DB ERROR", error);
        });
    }
    FavoriteComponent.prototype.mySqlfetch = function () {
        var self = this;
        var strSQL = "SELECT * FROM dict WHERE favorite = 1";
        self.database.all(strSQL).then(function (result) {
            self.word_sql = result;
        }, function (error) {
            console.log("SELECT Favoirite Error => ", error);
        });
    };
    FavoriteComponent.prototype.ngOnInit = function () {
        console.log("ngOnInit == v");
        var self = this;
        self.setList();
    };
    FavoriteComponent.prototype.setList = function () {
        var self = this;
        var word = self.word_sql;
        for (var row in word) {
            var model_item = new item_1.Item();
            console.log("word on set list ", word[row]);
            model_item.id = word[row][0];
            model_item.wordEng = word[row][1] + " ";
            model_item.wordThai = word[row][2] + " ";
            model_item.wordType = " [" + word[row][3] + "] ";
            model_item.wordFavorite = word[row][4];
            self.show_list.push(model_item);
        }
    };
    return FavoriteComponent;
}());
FavoriteComponent = __decorate([
    core_1.Component({
        selector: "favorite",
        templateUrl: "views/favorite/favorite-component.html",
    }),
    __metadata("design:paramtypes", [])
], FavoriteComponent);
exports.FavoriteComponent = FavoriteComponent;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmF2b3JpdGUtY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiZmF2b3JpdGUtY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxzQ0FBbUQ7QUFFbkQsa0RBQWlEO0FBRWpELElBQUksTUFBTSxHQUFHLE9BQU8sQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDO0FBQzVDLElBQUksS0FBSyxHQUFHLE9BQU8sQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDO0FBTzFDLElBQWEsaUJBQWlCO0lBUzFCO1FBTlEsYUFBUSxHQUFFLEVBQUUsQ0FBQyxDQUFDLGlCQUFpQjtRQUMvQixjQUFTLEdBQUcsRUFBRSxDQUFDLENBQUMsdUJBQXVCO1FBTTNDLElBQUksSUFBSSxHQUFHLElBQUksQ0FBQztRQUNoQixJQUFJLE1BQU0sQ0FBQyxVQUFVLENBQUMsQ0FBQyxJQUFJLENBQUMsVUFBQSxFQUFFO1lBQzFCLElBQUksQ0FBQyxRQUFRLEdBQUcsRUFBRSxDQUFDO1lBQ25CLE9BQU8sQ0FBQyxHQUFHLENBQUMsdUJBQXVCLENBQUMsQ0FBQztZQUNyQyxJQUFJLENBQUMsVUFBVSxFQUFFLENBQUM7UUFDdEIsQ0FBQyxFQUFDLFVBQUEsS0FBSztZQUNILE9BQU8sQ0FBQyxHQUFHLENBQUMsZUFBZSxFQUFHLEtBQUssQ0FBQyxDQUFDO1FBQ3pDLENBQUMsQ0FBQyxDQUFBO0lBSU4sQ0FBQztJQUVPLHNDQUFVLEdBQWxCO1FBQ0ksSUFBSSxJQUFJLEdBQUcsSUFBSSxDQUFDO1FBQ2hCLElBQUksTUFBTSxHQUFHLHVDQUF1QyxDQUFDO1FBQ3JELElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFBLE1BQU07WUFDakMsSUFBSSxDQUFDLFFBQVEsR0FBRyxNQUFNLENBQUM7UUFDM0IsQ0FBQyxFQUFDLFVBQUEsS0FBSztZQUNILE9BQU8sQ0FBQyxHQUFHLENBQUMsNEJBQTRCLEVBQUcsS0FBSyxDQUFDLENBQUM7UUFFdEQsQ0FBQyxDQUFDLENBQUE7SUFDTixDQUFDO0lBRUQsb0NBQVEsR0FBUjtRQUNJLE9BQU8sQ0FBQyxHQUFHLENBQUMsZUFBZSxDQUFDLENBQUM7UUFFbkMsSUFBSSxJQUFJLEdBQUcsSUFBSSxDQUFDO1FBQ1YsSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDO0lBQ3RCLENBQUM7SUFFVSxtQ0FBTyxHQUFmO1FBQ0ksSUFBSSxJQUFJLEdBQUcsSUFBSSxDQUFDO1FBQ2hCLElBQUksSUFBSSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUM7UUFFekIsR0FBRyxDQUFBLENBQUMsSUFBSSxHQUFHLElBQUksSUFBSSxDQUFDLENBQUEsQ0FBQztZQUNqQixJQUFJLFVBQVUsR0FBVSxJQUFJLFdBQUksRUFBRSxDQUFDO1lBRW5DLE9BQU8sQ0FBQyxHQUFHLENBQUMsbUJBQW1CLEVBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7WUFDN0MsVUFBVSxDQUFDLEVBQUUsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDN0IsVUFBVSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDO1lBQ3hDLFVBQVUsQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQztZQUN6QyxVQUFVLENBQUMsUUFBUSxHQUFHLElBQUksR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDO1lBQ2pELFVBQVUsQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBRXZDLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBQ3BDLENBQUM7SUFHTCxDQUFDO0lBSUwsd0JBQUM7QUFBRCxDQUFDLEFBL0RELElBK0RDO0FBL0RZLGlCQUFpQjtJQUo3QixnQkFBUyxDQUFDO1FBQ1AsUUFBUSxFQUFFLFVBQVU7UUFDcEIsV0FBVyxFQUFFLHdDQUF3QztLQUN4RCxDQUFDOztHQUNXLGlCQUFpQixDQStEN0I7QUEvRFksOENBQWlCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50ICwgT25Jbml0IH0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcclxuaW1wb3J0IHsgUm91dGUgfSBmcm9tIFwiQGFuZ3VsYXIvcm91dGVyXCI7XHJcbmltcG9ydCB7IEl0ZW0gfSBmcm9tIFwiLi8uLi8uLi9tb2RlbHMvaXRlbXMvaXRlbVwiO1xyXG5cclxudmFyIFNxbGl0ZSA9IHJlcXVpcmUoXCJuYXRpdmVzY3JpcHQtc3FsaXRlXCIpO1xyXG52YXIgVG9hc3QgPSByZXF1aXJlKFwibmF0aXZlc2NyaXB0LXRvYXN0XCIpO1xyXG5cclxuXHJcbkBDb21wb25lbnQoe1xyXG4gICAgc2VsZWN0b3I6IFwiZmF2b3JpdGVcIixcclxuICAgIHRlbXBsYXRlVXJsOiBcInZpZXdzL2Zhdm9yaXRlL2Zhdm9yaXRlLWNvbXBvbmVudC5odG1sXCIsXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBGYXZvcml0ZUNvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCB7XHJcbiAgICBcclxuICAgIHByaXZhdGUgZGF0YWJhc2U7XHJcbiAgICBwcml2YXRlIHdvcmRfc3FsID1bXTsgLy8gb3V0IHB1dCBvbiBzcWxcclxuICAgIHByaXZhdGUgc2hvd19saXN0ID0gW107IC8vIHNob3cgbGlzdCBvbiBsYXlvdXRzXHJcbiAgICBcclxuICAgIFxyXG5cclxuICAgIFxyXG4gICAgY29uc3RydWN0b3IoKXtcclxuICAgICAgICBsZXQgc2VsZiA9IHRoaXM7XHJcbiAgICAgICAgbmV3IFNxbGl0ZShcImRpY3RzLmRiXCIpLnRoZW4oZGIgPT57XHJcbiAgICAgICAgICAgIHNlbGYuZGF0YWJhc2UgPSBkYjtcclxuICAgICAgICAgICAgY29uc29sZS5sb2coXCJPcGVuIGRhdGFiYXNlIFN1Y2Nlc3NcIik7XHJcbiAgICAgICAgICAgIHNlbGYubXlTcWxmZXRjaCgpO1xyXG4gICAgICAgIH0sZXJyb3IgPT57XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiT3BlbiBEQiBFUlJPUlwiICwgZXJyb3IpO1xyXG4gICAgICAgIH0pXHJcbiAgICBcclxuICAgICAgICBcclxuXHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBteVNxbGZldGNoKCl7XHJcbiAgICAgICAgbGV0IHNlbGYgPSB0aGlzO1xyXG4gICAgICAgIGxldCBzdHJTUUwgPSBcIlNFTEVDVCAqIEZST00gZGljdCBXSEVSRSBmYXZvcml0ZSA9IDFcIjtcclxuICAgICAgICBzZWxmLmRhdGFiYXNlLmFsbChzdHJTUUwpLnRoZW4ocmVzdWx0ID0+IHtcclxuICAgICAgICAgICAgc2VsZi53b3JkX3NxbCA9IHJlc3VsdDtcclxuICAgICAgICB9LGVycm9yID0+e1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcIlNFTEVDVCBGYXZvaXJpdGUgRXJyb3IgPT4gXCIgLCBlcnJvcik7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgIH0pXHJcbiAgICB9XHJcblxyXG4gICAgbmdPbkluaXQoKSB7XHJcbiAgICAgICAgY29uc29sZS5sb2coXCJuZ09uSW5pdCA9PSB2XCIpO1xyXG4gICAgICAgIFxyXG5cdFx0bGV0IHNlbGYgPSB0aGlzO1xyXG4gICAgICAgIHNlbGYuc2V0TGlzdCgpO1xyXG5cdH1cclxuXHJcbiAgICBwcml2YXRlIHNldExpc3QoKXtcclxuICAgICAgICBsZXQgc2VsZiA9IHRoaXM7XHJcbiAgICAgICAgbGV0IHdvcmQgPSBzZWxmLndvcmRfc3FsO1xyXG4gICAgICAgIFxyXG4gICAgICAgIGZvcih2YXIgcm93IGluIHdvcmQpeyBcclxuICAgICAgICAgICAgbGV0IG1vZGVsX2l0ZW0gOiBJdGVtID0gbmV3IEl0ZW0oKTsgICAgICAgXHJcblxyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcIndvcmQgb24gc2V0IGxpc3QgXCIgLCB3b3JkW3Jvd10pO1xyXG4gICAgICAgICAgICBtb2RlbF9pdGVtLmlkID0gd29yZFtyb3ddWzBdO1xyXG4gICAgICAgICAgICBtb2RlbF9pdGVtLndvcmRFbmcgPSB3b3JkW3Jvd11bMV0gKyBcIiBcIjtcclxuICAgICAgICAgICAgbW9kZWxfaXRlbS53b3JkVGhhaSA9IHdvcmRbcm93XVsyXSArIFwiIFwiO1xyXG4gICAgICAgICAgICBtb2RlbF9pdGVtLndvcmRUeXBlID0gXCIgW1wiICsgd29yZFtyb3ddWzNdICsgXCJdIFwiO1xyXG4gICAgICAgICAgICBtb2RlbF9pdGVtLndvcmRGYXZvcml0ZSA9IHdvcmRbcm93XVs0XTtcclxuXHJcbiAgICAgICAgICAgIHNlbGYuc2hvd19saXN0LnB1c2gobW9kZWxfaXRlbSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIFxyXG5cclxuICAgIH1cclxuXHJcbiAgICBcclxuXHJcbn1cclxuIl19