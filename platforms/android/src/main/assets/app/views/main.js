"use strict";
var core_1 = require("@angular/core");
var router_1 = require("@angular/router");
var item_1 = require("../models/items/item");
var Sqlite = require("nativescript-sqlite");
var application = require("application");
var application_1 = require("application");
var platform_1 = require("platform");
var ViewComponent = (function () {
    function ViewComponent(router) {
        var _this = this;
        this.router = router;
        this.eng_rand = ""; //word eng Random show on layout
        this.thai_rand = ""; //word thai Random show on layout
        this.type_rand = ""; //word type Random show on layout
        this.word_list2 = []; //list show on layout
        this.word_search = ""; //ngModule input word search-
        this.word_list = []; //list sql temp 
        this.word_sql = ""; //output on sql
        this.viewCheck = 0; // เช็คว่า เป็นส่วนไหน 0-random , 1-Search , 2-Facvortie , 3-History
        console.log("5555555555555555555555555555555555555555555555555555555");
        //Code ตอนที่ไม่มีอะไรเลย เริ่มสร้างจาก 1
        (new Sqlite("dicts.db")).then(function (db) {
            db.execSQL("CREATE TABLE IF NOT EXISTS dict (id INTEGER PRIMARY KEY AUTOINCREMENT, engWorld TEXT, thaiWorld TEXT ,type TEXT DEFAULT 'Noun',favorite NUMBER DEFAULT 0 , sTime DATE DEFAULT Null )").then(function (id) {
                _this.database = db;
                console.log("CREAT TABLE ===> Success ");
                //this.insert();
                _this.fetch();
                _this.createHistory();
                _this.createMyUser();
                _this.btnSelectRandom();
            }, function (error) {
                console.log("CREATE TABLE ERROR", error);
            });
        }, function (error) {
            console.log("OPEN DB ERROR", error);
        });
    }
    ViewComponent.prototype.ngAfterViewInit = function () {
        console.log("ng==========> AfterViewInit");
    };
    ViewComponent.prototype.createHistory = function () {
        var self = this;
        self.database.execSQL("CREATE TABLE IF NOT EXISTS HISTORY (id INTEGER PRIMARY KEY AUTOINCREMENT,word_id INTEGER ,sTime DATE)").then(function (id) {
            self.database = self.database;
            console.log("CREATE HISTORY Success");
        }, function (error) {
            console.log("CREATE TABLE HISTORY ERROR", error);
        });
    };
    ViewComponent.prototype.createMyUser = function () {
        var self = this;
        self.database.execSQL("CREATE TABLE IF NOT EXISTS USERS (id INTEGER PRIMARY KEY AUTOINCREMENT,username TEXT , name TEXT , status INTEGER , login INTEGER DEFAULT 0 )").then(function (id) {
            self.database = self.database;
            console.log("CREATE USERS Success");
        }, function (error) {
            console.log("CREATE TABLE USERS ERROR", error);
        });
    };
    ViewComponent.prototype.insert = function () {
        var self = this;
        self.database.execSQL("INSERT INTO dict (engWorld, thaiWorld) VALUES (?,?)", ["red", "แดง"]).then(function (all_word) {
            console.log("INSERT RESULT => ", all_word);
            self.fetch();
        }, function (error) {
            console.log("INSERT ERROR => ", error);
        });
    };
    ViewComponent.prototype.fetch = function () {
        var self = this;
        console.log("Go to ===> fetch");
        self.database.all("SELECT * FROM dict").then(function (rows) {
            //console.log(rows);
            self.word_list = rows;
            /*for(var row in rows){
                console.log("Result ==v");
            
                console.log("result all ==> " , rows[row]);//result all
                console.log("eng_word ==> " , rows[row][1]); // result eng
                console.log("thai_word ==> " , rows[row][2]); //result thai
                console.log("type word ==> " , rows[row][3]); //result thai
            }*/
            for (var i = 0; i < rows.length; i++) {
            }
        }, function (error) {
            console.log("SELECT ERROR ", error);
        });
    };
    ViewComponent.prototype.fetch2 = function () {
        var _this = this;
        var self = this;
        self.viewCheck = 1;
        console.log("Go to ===> fetch 2");
        this.database.all("SELECT * FROM dict").then(function (rows) {
            //console.log(rows);
            _this.word_list = rows;
            /*for(var row in rows){
                console.log("Result ==v");
            
                console.log("result all ==> " , rows[row]);//result all
                console.log("eng_word ==> " , rows[row][1]); // result eng
                console.log("thai_word ==> " , rows[row][2]); //result thai
                console.log("type word ==> " , rows[row][3]); //result thai
            }*/
            for (var i = 0; i < rows.length; i++) {
            }
            self.refeshList();
            self.pushList(rows);
            //self.refeshList();
            //self.pushList(rows);   
        }, function (error) {
            console.log("SELECT ERROR ", error);
        });
    };
    ViewComponent.prototype.btnInsert = function () {
        console.log("click btnInsert");
        this.router.navigate(["insert"]), {
            transition: {
                name: "flip",
                dutation: 2000,
                curve: "linear"
            }
        };
        this.btnSelectRandom();
    };
    ViewComponent.prototype.btnSelect = function () {
        var _this = this;
        var search = this.word_search;
        if (search == "") {
            alert("มีช่องว่างนะไอ้โง่ .....");
        }
        else {
            console.log("Check ==> ", "Select ===> " + search);
            var temp = "%" + search + "%";
            this.database.all("SELECT * FROM dict WHERE engWorld LIKE (?) or thaiWorld LIKE (?)", [temp, temp]).then(function (rows) {
                if (rows == "") {
                    console.log("not word ===>  " + rows + "is " + search);
                    alert("ไม่มีคำว่า " + search + " ในฐานข้อมูล");
                }
                _this.word_list = rows;
                for (var row in rows) {
                    console.log("Result ==v");
                    /*for(var i=0 ; i <= rows.length ; i++ ){
                     console.log("result ==>" , rows[row][i]);
                    }*/
                    console.log("result all ==> ", rows[row]); //result all
                    console.log("eng_word ==> ", rows[row][1]); // result eng
                    console.log("thai_word ==> ", rows[row][2]); //result thai
                }
            }, function (error) {
                console.log("SELECT ERROR ", error);
            });
        }
    };
    ViewComponent.prototype.btnDelete = function () {
        console.log("Check == > ", " Delete");
        this.router.navigate(["delete"]), {};
        this.btnSelectRandom();
    };
    //  function use for listview
    ViewComponent.prototype.ngOnInit = function () {
        var _this = this;
        var self = this;
        console.log('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa');
        //self.getItem();
        //self.pushList(self.word_list);
        if (!platform_1.isAndroid) {
            return;
        }
        application.android.on(application_1.AndroidApplication.activityBackPressedEvent, function (data) {
            console.log('AndroidApplication.activityBackPressedEvent');
            _this.fetch2();
        });
    };
    ViewComponent.prototype.getItem = function () {
        console.log("GET ITEM ================> ");
        var self = this;
        var temp_list;
        temp_list = self.word_list;
        for (var row in temp_list) {
            var model_item = new item_1.Item();
            model_item.id = temp_list[row][0];
            model_item.wordEng = temp_list[row][1];
            model_item.wordThai = temp_list[row][2];
            model_item.wordType = temp_list[row][3];
            model_item.wordFavorite = temp_list[row][4];
            //console.log(temp_list[row][0] +" " + temp_list[row][1] +" " + temp_list[row][2] );
            self.word_list2.push(model_item);
        }
    };
    ViewComponent.prototype.getItemSelect = function () {
        var self = this;
        self.viewCheck = 1;
        var search = self.word_search;
        if (search == "") {
            alert("มีช่องว่างนะไอ้โง่ .....");
        }
        else {
            console.log("Check ==> ", "Select ===> " + search);
            var temp = search + "%";
            self.database.all("SELECT * FROM dict WHERE engWorld LIKE (?) or thaiWorld LIKE (?)", [temp, temp]).then(function (rows) {
                if (rows == "") {
                    console.log("not word ===>  " + rows + "is " + search);
                    alert("ไม่มีคำว่า " + search + " ในฐานข้อมูล");
                }
                else {
                    self.word_search = "";
                }
                self.word_sql = rows;
                self.refeshList();
                self.pushList(rows);
                //self.refeshList();
                //self.pushList(rows);
            }, function (error) {
                console.log("SELECT ERROR ", error);
            });
        }
    };
    ViewComponent.prototype.getItemFavorite = function () {
        var self = this;
        self.viewCheck = 1;
        var strSQL = "SELECT * FROM dict WHERE favorite = 1";
        self.database.all(strSQL).then(function (result) {
            self.word_sql = result;
            self.refeshList();
            self.pushList(self.word_sql);
        }, function (error) {
            console.log("SELECT Favoirite Error => ", error);
        });
    };
    ViewComponent.prototype.getItemHistory = function () {
        var self = this;
        self.viewCheck = 1;
        var strSQL = "SELECT h.word_id , d.engWorld , d.thaiWorld , d.type , d.favorite FROM HISTORY h join dict d on h.word_id = d.id ORDER BY h.id DESC";
        self.database.all(strSQL).then(function (result) {
            self.word_sql = result;
            self.refeshList();
            self.pushList(self.word_sql);
        }, function (error) {
            console.log("SELECT History Error => ", error);
        });
    };
    ViewComponent.prototype.btnSelectRandom = function () {
        //console.log("Select Random");
        var self = this;
        self.viewCheck = 0;
        self.refeshList();
        self.database.all("SELECT * FROM dict ORDER BY RANDOM() LIMIT 1").then(function (rows) {
            console.log(rows);
            console.log("eng_word ==> ", rows[0][1]); // result eng
            self.eng_rand = rows[0][1];
            console.log("thai_word ==> ", rows[0][2]); //result thai
            self.thai_rand = rows[0][2];
            console.log("type word ==> ", rows[0][3]); //result type
            self.type_rand = rows[0][3];
        }, function (error) {
            console.log("SELECT ERROR ", error);
        });
    };
    ViewComponent.prototype.refeshList = function () {
        var self = this;
        var delPop = self.word_list2.length;
        console.log("delpop length ==>", delPop);
        if (delPop > 0) {
            for (var i = 0; i < delPop; i++) {
                self.word_list2.pop();
            }
        }
    };
    ViewComponent.prototype.pushList = function (args) {
        var self = this;
        var rows = args;
        for (var row in rows) {
            //console.log(rows[row]);
            var model_item = new item_1.Item();
            model_item.id = rows[row][0];
            model_item.wordEng = rows[row][1];
            model_item.wordThai = rows[row][2];
            model_item.wordType = rows[row][3];
            model_item.wordFavorite = rows[row][4];
            //console.log(rows[row][0] +" " + rows[row][1] +" " + rows[row][2] +"" );
            self.word_list2.push(model_item);
        }
    };
    ViewComponent.prototype.onItemTap = function (args) {
        var self = this;
        var word = self.word_list2[args.index];
        var navigationExtras = {
            queryParams: {
                "words": JSON.stringify(word)
            }
        };
        this.router.navigate(["list-detail"], navigationExtras);
    };
    ViewComponent.prototype.onSetting = function () {
        console.log("Check == > ", " onSetting");
        this.router.navigate(["setting"]), {};
    };
    return ViewComponent;
}());
ViewComponent = __decorate([
    core_1.Component({
        selector: "ns-app",
        templateUrl: "views/main.html",
    }),
    __metadata("design:paramtypes", [router_1.Router])
], ViewComponent);
exports.ViewComponent = ViewComponent;
//# sourceMappingURL=data:application/json;base64,