"use strict";
var core_1 = require("@angular/core");
var router_1 = require("@angular/router");
var item_1 = require("../models/items/item");
var Sqlite = require("nativescript-sqlite");
var ViewComponent = (function () {
    function ViewComponent(router) {
        var _this = this;
        this.router = router;
        this.eng_rand = "";
        this.thai_rand = "";
        this.type_rand = "";
        this.word_search = "";
        this.word_list = [];
        this.word_list2 = [];
        //Code ตอนที่ไม่มีอะไรเลย เริ่มสร้างจาก 1
        (new Sqlite("dicts.db")).then(function (db) {
            db.execSQL("CREATE TABLE IF NOT EXISTS dict (id INTEGER PRIMARY KEY AUTOINCREMENT, engWorld TEXT, thaiWorld TEXT ,type TEXT DEFAULT 'Noun' , sTime DATE DEFAULT Null )").then(function (id) {
                _this.database = db;
                console.log("CREAT TABLE ===> Success ");
                //this.insert();
                _this.fetch();
                db.execSQL("CREATE TABLE IF NOT EXISTS FAVORITE (id INTEGER PRIMARY KEY AUTOINCREMENT,word_id INTEGER)").then(function (id) {
                    _this.database = db;
                    console.log("CREATE FAVORITE Success");
                    _this.createHistory();
                    _this.btnSelectRandom();
                }, function (error) {
                    console.log("CREATE TABLE FAVORITE ERROR", error);
                });
            }, function (error) {
                console.log("CREATE TABLE ERROR", error);
            });
        }, function (error) {
            console.log("OPEN DB ERROR", error);
        });
        //เรียกใช้ database ที่มีอยู่แล้วชื่อ dicts.db
        /*new Sqlite("dicts.db").then(db =>{
            this.database = db;
            console.log("Open database Success")
            
        },error =>{
            console.log("Open DB ERROR" , error);
        })
        */
        //this.btnSelectRandom();
        //this.items = new Item();
    }
    ViewComponent.prototype.createHistory = function () {
        var _this = this;
        this.database.execSQL("CREATE TABLE IF NOT EXISTS HISTORY (id INTEGER PRIMARY KEY AUTOINCREMENT,word_id INTEGER ,sTime DATE)").then(function (id) {
            _this.database = _this.database;
            console.log("CREATE HISTORY Success");
        }, function (error) {
            console.log("CREATE TABLE HISTORY ERROR", error);
        });
    };
    ViewComponent.prototype.insert = function () {
        var _this = this;
        this.database.execSQL("INSERT INTO dict (engWorld, thaiWorld) VALUES (?,?)", ["red", "แดง"]).then(function (all_word) {
            console.log("INSERT RESULT => ", all_word);
            _this.fetch();
        }, function (error) {
            console.log("INSERT ERROR => ", error);
        });
    };
    ViewComponent.prototype.fetch = function () {
        var _this = this;
        console.log("Go to ===> fetch");
        this.database.all("SELECT * FROM dict").then(function (rows) {
            console.log(rows);
            _this.word_list = rows;
            /*for(var row in rows){
                console.log("Result ==v");
            
                console.log("result all ==> " , rows[row]);//result all
                console.log("eng_word ==> " , rows[row][1]); // result eng
                console.log("thai_word ==> " , rows[row][2]); //result thai
                console.log("type word ==> " , rows[row][3]); //result thai
            }*/
            for (var i = 0; i < rows.length; i++) {
                console.log("result ==>", rows[i]);
            }
        }, function (error) {
            console.log("SELECT ERROR ", error);
        });
    };
    ViewComponent.prototype.btnInsert = function () {
        console.log("click btnInsert");
        this.router.navigate(["insert"]), {
            transition: {
                name: "flip",
                dutation: 2000,
                curve: "linear"
            }
        };
        this.btnSelectRandom();
    };
    ViewComponent.prototype.btnSelect = function () {
        var _this = this;
        var search = this.word_search;
        if (search == "") {
            alert("มีช่องว่างนะไอ้โง่ .....");
        }
        else {
            console.log("Check ==> ", "Select ===> " + search);
            var temp = "%" + search + "%";
            this.database.all("SELECT * FROM dict WHERE engWorld LIKE (?) or thaiWorld LIKE (?)", [temp, temp]).then(function (rows) {
                if (rows == "") {
                    console.log("not word ===>  " + rows + "is " + search);
                    alert("ไม่มีคำว่า " + search + " ในฐานข้อมูล");
                }
                _this.word_list = rows;
                for (var row in rows) {
                    console.log("Result ==v");
                    /*for(var i=0 ; i <= rows.length ; i++ ){
                     console.log("result ==>" , rows[row][i]);
                    }*/
                    console.log("result all ==> ", rows[row]); //result all
                    console.log("eng_word ==> ", rows[row][1]); // result eng
                    console.log("thai_word ==> ", rows[row][2]); //result thai
                }
            }, function (error) {
                console.log("SELECT ERROR ", error);
            });
        }
    };
    ViewComponent.prototype.btnDelete = function () {
        console.log("Check == > ", " Delete");
        this.router.navigate(["delete"]), {};
        this.btnSelectRandom();
    };
    //  function use for listview
    ViewComponent.prototype.ngOnInit = function () {
        var self = this;
        self.getItem();
    };
    ViewComponent.prototype.onItemTap = function (args) {
        var self = this;
        var word = self.word_list2[args.index];
        //this.router.navigate(["view-list", word.id]);
        //console.log("------------------------ ItemTapped: " + args.index);
        console.log(JSON.stringify(word));
        var navigationExtras = {
            queryParams: {
                "word": JSON.stringify(word)
            }
        };
        this.router.navigate(["list-detail"], navigationExtras);
    };
    ViewComponent.prototype.getItem = function () {
        console.log("GET ITEM ================> ");
        var self = this;
        var temp_list;
        temp_list = self.word_list;
        for (var row in temp_list) {
            var model_item = new item_1.Item();
            model_item.id = temp_list[row][0];
            model_item.wordEng = temp_list[row][1];
            model_item.wordThai = temp_list[row][2];
            //console.log(temp_list[row][0] +" " + temp_list[row][1] +" " + temp_list[row][2] );
            self.word_list2.push(model_item);
        }
    };
    ViewComponent.prototype.getItemSelect = function () {
        var self = this;
        var search = self.word_search;
        if (search == "") {
            alert("มีช่องว่างนะไอ้โง่ .....");
        }
        else {
            console.log("Check ==> ", "Select ===> " + search);
            var delPop = self.word_list2.length;
            console.log("delpop length ==>", delPop);
            if (delPop > 0) {
                for (var i = 0; i < delPop; i++) {
                    self.word_list2.pop();
                }
            }
            var temp = search + "%";
            self.database.all("SELECT * FROM dict WHERE engWorld LIKE (?) or thaiWorld LIKE (?)", [temp, temp]).then(function (rows) {
                if (rows == "") {
                    console.log("not word ===>  " + rows + "is " + search);
                    alert("ไม่มีคำว่า " + search + " ในฐานข้อมูล");
                }
                else {
                    self.word_search = "";
                }
                self.word_list = rows;
                for (var row in rows) {
                    console.log(rows[row]);
                    var model_item = new item_1.Item();
                    model_item.id = rows[row][0];
                    model_item.wordEng = rows[row][1];
                    model_item.wordThai = rows[row][2];
                    console.log(rows[row][0] + " " + rows[row][1] + " " + rows[row][2] + "");
                    self.word_list2.push(model_item);
                }
            }, function (error) {
                console.log("SELECT ERROR ", error);
            });
        }
    };
    ViewComponent.prototype.btnSelectRandom = function () {
        //console.log("Select Random");
        var _this = this;
        this.database.all("SELECT * FROM dict ORDER BY RANDOM() LIMIT 1").then(function (rows) {
            console.log(rows);
            console.log("eng_word ==> ", rows[0][1]); // result eng
            _this.eng_rand = rows[0][1];
            //this.items.wordEng = rows[0][1];
            //console.log("eng_word ITEM ==> " , this.items.wordEng); // result eng
            console.log("thai_word ==> ", rows[0][2]); //result thai
            _this.thai_rand = rows[0][2];
            //this.items.wordThai = rows[0][2];
            //console.log("eng_thai ITEM ==> " , this.items.wordThai); // result eng
            console.log("type word ==> ", rows[0][3]); //result type
            _this.type_rand = rows[0][3];
            //this.items.wordType = rows[0][3];
            //console.log("eng_type ITEM ==> " , this.items.wordType); // result eng
            /*for(var row in rows){
                console.log("Result ==v");
            
                console.log("result all ==> " , rows[0][0]);//result all

                console.log("eng_word ==> " , rows[row][1]); // result eng
                this.eng_rand = rows[row][1];
            
                console.log("thai_word ==> " , rows[row][2]); //result thai
                this.thai_rand = rows[row][2];


                console.log("type word ==> " , rows[row][3]); //result type
                this.type_rand = rows[row][3];
            }*/
            /*for(var i=0 ; i < rows.length ; i++ ){
                    console.log("result for row ==>" , rows[i]);
                }*/
            //this.eng_rand = rows[1];
        }, function (error) {
            console.log("SELECT ERROR ", error);
        });
    };
    return ViewComponent;
}());
ViewComponent = __decorate([
    core_1.Component({
        selector: "ns-app",
        templateUrl: "views/main.html",
    }),
    __metadata("design:paramtypes", [router_1.Router])
], ViewComponent);
exports.ViewComponent = ViewComponent;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIm1haW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLHNDQUFrRDtBQUNsRCwwQ0FBeUQ7QUFHekQsNkNBQTRDO0FBRzVDLElBQUksTUFBTSxHQUFHLE9BQU8sQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDO0FBUzVDLElBQWEsYUFBYTtJQWdCdEIsdUJBQTJCLE1BQWM7UUFBekMsaUJBdUNDO1FBdkMwQixXQUFNLEdBQU4sTUFBTSxDQUFRO1FBWnpDLGFBQVEsR0FBRSxFQUFFLENBQUM7UUFDYixjQUFTLEdBQUcsRUFBRSxDQUFDO1FBQ2YsY0FBUyxHQUFFLEVBQUUsQ0FBQztRQUVkLGdCQUFXLEdBQUUsRUFBRSxDQUFDO1FBRWhCLGNBQVMsR0FBRyxFQUFFLENBQUM7UUFDZixlQUFVLEdBQUcsRUFBRSxDQUFDO1FBUVoseUNBQXlDO1FBQ3pDLENBQUMsSUFBSSxNQUFNLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsVUFBQSxFQUFFO1lBQzVCLEVBQUUsQ0FBQyxPQUFPLENBQUMsNEpBQTRKLENBQUMsQ0FBQyxJQUFJLENBQUMsVUFBQSxFQUFFO2dCQUM1SyxLQUFJLENBQUMsUUFBUSxHQUFHLEVBQUUsQ0FBQztnQkFDbkIsT0FBTyxDQUFDLEdBQUcsQ0FBQywyQkFBMkIsQ0FBQyxDQUFDO2dCQUN6QyxnQkFBZ0I7Z0JBQ2hCLEtBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQztnQkFDYixFQUFFLENBQUMsT0FBTyxDQUFDLDRGQUE0RixDQUFDLENBQUMsSUFBSSxDQUFDLFVBQUEsRUFBRTtvQkFDNUcsS0FBSSxDQUFDLFFBQVEsR0FBRyxFQUFFLENBQUM7b0JBQ25CLE9BQU8sQ0FBQyxHQUFHLENBQUMseUJBQXlCLENBQUMsQ0FBQztvQkFDdkMsS0FBSSxDQUFDLGFBQWEsRUFBRSxDQUFDO29CQUNyQixLQUFJLENBQUMsZUFBZSxFQUFFLENBQUM7Z0JBQzNCLENBQUMsRUFBQyxV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bUM7WUFDbkMsd0VBQXdFO1lBR3hFLE9BQU8sQ0FBQyxHQUFHLENBQUMsZ0JBQWdCLEVBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxhQUFhO1lBQ3pELEtBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQzVCLG1DQUFtQztZQUNuQyx3RUFBd0U7WUFFeEU7Ozs7Ozs7Ozs7Ozs7O2VBY0c7WUFDSDs7bUJBRU87WUFHUCwwQkFBMEI7UUFFOUIsQ0FBQyxFQUFDLFVBQUEsS0FBSztZQUNILE9BQU8sQ0FBQyxHQUFHLENBQUMsZUFBZSxFQUFHLEtBQUssQ0FBQyxDQUFDO1FBQ3pDLENBQUMsQ0FBQyxDQUFBO0lBR04sQ0FBQztJQU1KLG9CQUFDO0FBQUQsQ0FBQyxBQXZURixJQXVURTtBQXZUVyxhQUFhO0lBSnpCLGdCQUFTLENBQUM7UUFDUCxRQUFRLEVBQUUsUUFBUTtRQUNsQixXQUFXLEVBQUUsaUJBQWlCO0tBQ2pDLENBQUM7cUNBaUJxQyxlQUFNO0dBaEJoQyxhQUFhLENBdVR4QjtBQXZUVyxzQ0FBYSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgT25Jbml0IH0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcclxuaW1wb3J0IHtSb3V0ZXIsIE5hdmlnYXRpb25FeHRyYXN9IGZyb20gXCJAYW5ndWxhci9yb3V0ZXJcIjsgXHJcbmltcG9ydCBsaXN0Vmlld01vZHVsZSA9IHJlcXVpcmUoXCJ1aS9saXN0LXZpZXdcIik7XHJcblxyXG5pbXBvcnQgeyBJdGVtIH0gZnJvbSBcIi4uL21vZGVscy9pdGVtcy9pdGVtXCI7XHJcblxyXG5cclxudmFyIFNxbGl0ZSA9IHJlcXVpcmUoXCJuYXRpdmVzY3JpcHQtc3FsaXRlXCIpO1xyXG5cclxuXHJcblxyXG5cclxuQENvbXBvbmVudCh7XHJcbiAgICBzZWxlY3RvcjogXCJucy1hcHBcIixcclxuICAgIHRlbXBsYXRlVXJsOiBcInZpZXdzL21haW4uaHRtbFwiLFxyXG59KVxyXG5leHBvcnQgY2xhc3MgVmlld0NvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCB7XHJcblxyXG4gICAgcHJpdmF0ZSBkYXRhYmFzZSA6IGFueTtcclxuXHJcbiAgICBlbmdfcmFuZCA9XCJcIjtcclxuICAgIHRoYWlfcmFuZCA9IFwiXCI7XHJcbiAgICB0eXBlX3JhbmQgPVwiXCI7XHJcblxyXG4gICAgd29yZF9zZWFyY2ggPVwiXCI7XHJcbiAgICBcclxuICAgIHdvcmRfbGlzdCA9IFtdO1xyXG4gICAgd29yZF9saXN0MiA9IFtdO1xyXG5cclxuICAgIFxyXG4gICAgXHJcblxyXG4gICAgcHVibGljIGNvbnN0cnVjdG9yKHByaXZhdGUgcm91dGVyOiBSb3V0ZXIgKXtcclxuXHJcbiAgICAgICAgXHJcbiAgICAgICAgLy9Db2RlIOC4leC4reC4meC4l+C4teC5iOC5hOC4oeC5iOC4oeC4teC4reC4sOC5hOC4o+C5gOC4peC4oiDguYDguKPguLTguYjguKHguKrguKPguYnguLLguIfguIjguLLguIEgMVxyXG4gICAgICAgIChuZXcgU3FsaXRlKFwiZGljdHMuZGJcIikpLnRoZW4oZGIgPT4ge1xyXG4gICAgICAgICAgICBkYi5leGVjU1FMKFwiQ1JFQVRFIFRBQkxFIElGIE5PVCBFWElTVFMgZGljdCAoaWQgSU5URUdFUiBQUklNQVJZIEtFWSBBVVRPSU5DUkVNRU5ULCBlbmdXb3JsZCBURVhULCB0aGFpV29ybGQgVEVYVCAsdHlwZSBURVhUIERFRkFVTFQgJ05vdW4nICwgc1RpbWUgREFURSBERUZBVUxUIE51bGwgKVwiKS50aGVuKGlkID0+e1xyXG4gICAgICAgICAgICAgICAgdGhpcy5kYXRhYmFzZSA9IGRiO1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJDUkVBVCBUQUJMRSA9PT0+IFN1Y2Nlc3MgXCIpO1xyXG4gICAgICAgICAgICAgICAgLy90aGlzLmluc2VydCgpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5mZXRjaCgpO1xyXG4gICAgICAgICAgICAgICAgZGIuZXhlY1NRTChcIkNSRUFURSBUQUJMRSBJRiBOT1QgRVhJU1RTIEZBVk9SSVRFIChpZCBJTlRFR0VSIFBSSU1BUlkgS0VZIEFVVE9JTkNSRU1FTlQsd29yZF9pZCBJTlRFR0VSKVwiKS50aGVuKGlkID0+e1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZGF0YWJhc2UgPSBkYjtcclxuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIkNSRUFURSBGQVZPUklURSBTdWNjZXNzXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY3JlYXRlSGlzdG9yeSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYnRuU2VsZWN0UmFuZG9tKCk7XHJcbiAgICAgICAgICAgICAgICB9LGVycm9yID0+e1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiQ1JFQVRFIFRBQkxFIEZBVk9SSVRFIEVSUk9SXCIgLCBlcnJvcik7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfSxlcnJvciA9PntcclxuICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJDUkVBVEUgVEFCTEUgRVJST1JcIiAsIGVycm9yKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICkgICBcclxuICAgICAgICB9LGVycm9yID0+e1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcIk9QRU4gREIgRVJST1JcIiAsIGVycm9yKTtcclxuICAgICAgICB9KVxyXG5cclxuICAgICAgICAvL+C5gOC4o+C4teC4ouC4geC5g+C4iuC5iSBkYXRhYmFzZSDguJfguLXguYjguKHguLXguK3guKLguLnguYjguYHguKXguYnguKfguIrguLfguYjguK0gZGljdHMuZGJcclxuICAgICAgICAvKm5ldyBTcWxpdGUoXCJkaWN0cy5kYlwiKS50aGVuKGRiID0+e1xyXG4gICAgICAgICAgICB0aGlzLmRhdGFiYXNlID0gZGI7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiT3BlbiBkYXRhYmFzZSBTdWNjZXNzXCIpXHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgIH0sZXJyb3IgPT57XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiT3BlbiBEQiBFUlJPUlwiICwgZXJyb3IpO1xyXG4gICAgICAgIH0pXHJcbiAgICAgICAgKi9cclxuXHJcbiAgICAgICAgLy90aGlzLmJ0blNlbGVjdFJhbmRvbSgpO1xyXG4gICAgICAgIC8vdGhpcy5pdGVtcyA9IG5ldyBJdGVtKCk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGNyZWF0ZUhpc3RvcnkoKXtcclxuICAgICAgICB0aGlzLmRhdGFiYXNlLmV4ZWNTUUwoXCJDUkVBVEUgVEFCTEUgSUYgTk9UIEVYSVNUUyBISVNUT1JZIChpZCBJTlRFR0VSIFBSSU1BUlkgS0VZIEFVVE9JTkNSRU1FTlQsd29yZF9pZCBJTlRFR0VSICxzVGltZSBEQVRFKVwiKS50aGVuKGlkID0+e1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZGF0YWJhc2UgPSB0aGlzLmRhdGFiYXNlO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiQ1JFQVRFIEhJU1RPUlkgU3VjY2Vzc1wiKTtcclxuICAgICAgICAgICAgICAgIH0sZXJyb3IgPT57XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJDUkVBVEUgVEFCTEUgSElTVE9SWSBFUlJPUlwiICwgZXJyb3IpO1xyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgIH1cclxuICAgIFxyXG5cclxuXHJcblxyXG4gICAgcHVibGljIGluc2VydCgpe1xyXG4gICAgICAgIHRoaXMuZGF0YWJhc2UuZXhlY1NRTChcIklOU0VSVCBJTlRPIGRpY3QgKGVuZ1dvcmxkLCB0aGFpV29ybGQpIFZBTFVFUyAoPyw/KVwiLCBbXCJyZWRcIiAsXCLguYHguJTguIdcIl0pLnRoZW4oYWxsX3dvcmQgPT4ge1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJJTlNFUlQgUkVTVUxUID0+IFwiICwgYWxsX3dvcmQgICk7XHJcbiAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgdGhpcy5mZXRjaCgpO1xyXG4gICAgICAgICAgICB9LCBlcnJvciA9PiB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiSU5TRVJUIEVSUk9SID0+IFwiICwgZXJyb3IpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZmV0Y2goKXtcclxuICAgICAgICBjb25zb2xlLmxvZyhcIkdvIHRvID09PT4gZmV0Y2hcIik7XHJcbiAgICAgICAgdGhpcy5kYXRhYmFzZS5hbGwoXCJTRUxFQ1QgKiBGUk9NIGRpY3RcIikudGhlbihyb3dzID0+e1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhyb3dzKTtcclxuICAgICAgICAgICAgdGhpcy53b3JkX2xpc3QgPSByb3dzO1xyXG4gICAgICAgICAgICAvKmZvcih2YXIgcm93IGluIHJvd3Mpe1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJSZXN1bHQgPT12XCIpO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwicmVzdWx0IGFsbCA9PT4gXCIgLCByb3dzW3Jvd10pOy8vcmVzdWx0IGFsbFxyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJlbmdfd29yZCA9PT4gXCIgLCByb3dzW3Jvd11bMV0pOyAvLyByZXN1bHQgZW5nXHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcInRoYWlfd29yZCA9PT4gXCIgLCByb3dzW3Jvd11bMl0pOyAvL3Jlc3VsdCB0aGFpXHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcInR5cGUgd29yZCA9PT4gXCIgLCByb3dzW3Jvd11bM10pOyAvL3Jlc3VsdCB0aGFpXHJcbiAgICAgICAgICAgIH0qL1xyXG4gICAgICAgICAgICBmb3IodmFyIGk9MCA7IGkgPCByb3dzLmxlbmd0aCA7IGkrKyApe1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwicmVzdWx0ID09PlwiICwgcm93c1tpXSk7IFxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sZXJyb3IgPT57XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiU0VMRUNUIEVSUk9SIFwiICwgZXJyb3IpO1xyXG4gICAgICAgIH0pXHJcbiAgICB9XHJcblxyXG4gICAgYnRuSW5zZXJ0KCl7XHJcbiAgICAgICAgY29uc29sZS5sb2coXCJjbGljayBidG5JbnNlcnRcIik7XHJcbiAgICAgICAgdGhpcy5yb3V0ZXIubmF2aWdhdGUoW1wiaW5zZXJ0XCJdKSx7XHJcbiAgICAgICAgICAgIHRyYW5zaXRpb246IHtcclxuICAgICAgICAgICAgICAgIG5hbWUgOiBcImZsaXBcIiAsXHJcbiAgICAgICAgICAgICAgICBkdXRhdGlvbjogMjAwMCxcclxuICAgICAgICAgICAgICAgIGN1cnZlOiBcImxpbmVhclwiXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5idG5TZWxlY3RSYW5kb20oKTtcclxuICAgICAgICBcclxuICAgIH1cclxuXHJcbiAgICBidG5TZWxlY3QoKXtcclxuICAgICAgICB2YXIgc2VhcmNoID0gdGhpcy53b3JkX3NlYXJjaDtcclxuICAgICAgICBpZiAoc2VhcmNoID09IFwiXCIpe1xyXG4gICAgICAgICAgICBhbGVydChcIuC4oeC4teC4iuC5iOC4reC4h+C4p+C5iOC4suC4h+C4meC4sOC5hOC4reC5ieC5guC4h+C5iCAuLi4uLlwiKTtcclxuICAgICAgICB9ZWxzZXtcclxuICAgICAgICAgICAgY29uc29sZS5sb2coXCJDaGVjayA9PT4gXCIgLCBcIlNlbGVjdCA9PT0+IFwiICsgc2VhcmNoKTtcclxuICAgICAgICAgICAgIHZhciB0ZW1wID0gXCIlXCIrc2VhcmNoK1wiJVwiO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgdGhpcy5kYXRhYmFzZS5hbGwoXCJTRUxFQ1QgKiBGUk9NIGRpY3QgV0hFUkUgZW5nV29ybGQgTElLRSAoPykgb3IgdGhhaVdvcmxkIExJS0UgKD8pXCIsW3RlbXAsdGVtcF0gKS50aGVuKHJvd3MgPT57XHJcbiAgICAgICAgICAgICAgICBpZihyb3dzID09XCJcIil7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJub3Qgd29yZCA9PT0+ICBcIiArIHJvd3MgKyBcImlzIFwiICsgc2VhcmNoKTtcclxuICAgICAgICAgICAgICAgICAgICBhbGVydChcIuC5hOC4oeC5iOC4oeC4teC4hOC4s+C4p+C5iOC4siBcIiArIHNlYXJjaCArIFwiIOC5g+C4meC4kOC4suC4meC4guC5ieC4reC4oeC4ueC4pVwiKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHRoaXMud29yZF9saXN0ID0gcm93cztcclxuICAgICAgICAgICAgICAgIGZvcih2YXIgcm93IGluIHJvd3Mpe1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiUmVzdWx0ID09dlwiKTtcclxuICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvKmZvcih2YXIgaT0wIDsgaSA8PSByb3dzLmxlbmd0aCA7IGkrKyApe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJyZXN1bHQgPT0+XCIgLCByb3dzW3Jvd11baV0pOyBcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSovXHJcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJyZXN1bHQgYWxsID09PiBcIiAsIHJvd3Nbcm93XSk7Ly9yZXN1bHQgYWxsXHJcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJlbmdfd29yZCA9PT4gXCIgLCByb3dzW3Jvd11bMV0pOyAvLyByZXN1bHQgZW5nXHJcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJ0aGFpX3dvcmQgPT0+IFwiICwgcm93c1tyb3ddWzJdKTsgLy9yZXN1bHQgdGhhaVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0sZXJyb3IgPT57XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJTRUxFQ1QgRVJST1IgXCIgLCBlcnJvcik7XHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgXHJcbiAgICB9XHJcblxyXG5cclxuICAgIGJ0bkRlbGV0ZSgpe1xyXG4gICAgICAgIGNvbnNvbGUubG9nKFwiQ2hlY2sgPT0gPiBcIiAsIFwiIERlbGV0ZVwiKTtcclxuICAgICAgICB0aGlzLnJvdXRlci5uYXZpZ2F0ZShbXCJkZWxldGVcIl0pLHtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuYnRuU2VsZWN0UmFuZG9tKCk7XHJcbiAgICAgICAgIFxyXG4gICAgfVxyXG5cclxuXHJcblxyXG4gICAgLy8gIGZ1bmN0aW9uIHVzZSBmb3IgbGlzdHZpZXdcclxuICAgIG5nT25Jbml0KCk6IHZvaWQge1xyXG4gICAgICAgIGxldCBzZWxmID0gdGhpcztcclxuXHRcdHNlbGYuZ2V0SXRlbSgpO1xyXG4gICAgfVxyXG5cclxuICAgIG9uSXRlbVRhcChhcmdzKSB7XHJcblx0XHRsZXQgc2VsZiA9IHRoaXM7XHJcblx0XHRsZXQgd29yZCA9IHNlbGYud29yZF9saXN0MlthcmdzLmluZGV4XTtcclxuXHRcdC8vdGhpcy5yb3V0ZXIubmF2aWdhdGUoW1widmlldy1saXN0XCIsIHdvcmQuaWRdKTtcclxuICAgICAgICAvL2NvbnNvbGUubG9nKFwiLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIEl0ZW1UYXBwZWQ6IFwiICsgYXJncy5pbmRleCk7XHJcblxyXG4gICAgICAgIGNvbnNvbGUubG9nKEpTT04uc3RyaW5naWZ5KHdvcmQpICk7XHJcbiAgICAgICAgbGV0IG5hdmlnYXRpb25FeHRyYXM6IE5hdmlnYXRpb25FeHRyYXMgPSB7XHJcbiAgICAgICAgICAgIHF1ZXJ5UGFyYW1zOiB7XHJcbiAgICAgICAgICAgICAgICBcIndvcmRcIjogSlNPTi5zdHJpbmdpZnkod29yZClcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgdGhpcy5yb3V0ZXIubmF2aWdhdGUoW1wibGlzdC1kZXRhaWxcIl0sIG5hdmlnYXRpb25FeHRyYXMpO1xyXG4gICAgfVxyXG5cclxuICAgIGdldEl0ZW0oKXtcclxuICAgICAgICBjb25zb2xlLmxvZyhcIkdFVCBJVEVNID09PT09PT09PT09PT09PT0+IFwiKTtcclxuICAgICAgICBcclxuICAgICAgICBsZXQgc2VsZiA9IHRoaXM7XHJcbiAgICAgICAgdmFyIHRlbXBfbGlzdCA6IEFycmF5PGFueT47XHJcbiAgICAgICAgdGVtcF9saXN0ID0gc2VsZi53b3JkX2xpc3Q7XHJcbiAgICAgICAgXHJcbiAgICAgICAgZm9yKHZhciByb3cgaW4gdGVtcF9saXN0KXtcclxuIFxyXG5cclxuICAgICAgICAgICAgbGV0IG1vZGVsX2l0ZW0gOiBJdGVtID0gbmV3IEl0ZW0oKTtcclxuXHJcbiAgICAgICAgICAgIG1vZGVsX2l0ZW0uaWQgPSB0ZW1wX2xpc3Rbcm93XVswXTtcclxuICAgICAgICAgICAgbW9kZWxfaXRlbS53b3JkRW5nID0gdGVtcF9saXN0W3Jvd11bMV07XHJcbiAgICAgICAgICAgIG1vZGVsX2l0ZW0ud29yZFRoYWkgPSB0ZW1wX2xpc3Rbcm93XVsyXTtcclxuXHJcbiAgICAgICAgICAgIC8vY29uc29sZS5sb2codGVtcF9saXN0W3Jvd11bMF0gK1wiIFwiICsgdGVtcF9saXN0W3Jvd11bMV0gK1wiIFwiICsgdGVtcF9saXN0W3Jvd11bMl0gKTtcclxuXHJcbiAgICAgICAgICAgIHNlbGYud29yZF9saXN0Mi5wdXNoKG1vZGVsX2l0ZW0pO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICB9XHJcblxyXG4gICAgfVxyXG5cclxuXHJcblxyXG4gICBcclxuXHJcbiAgICBnZXRJdGVtU2VsZWN0KCl7XHJcbiAgICAgICAgbGV0IHNlbGYgPSB0aGlzO1xyXG4gICAgICAgIHZhciBzZWFyY2ggPSBzZWxmLndvcmRfc2VhcmNoO1xyXG4gICAgICAgIFxyXG4gICAgXHJcbiAgICAgICAgXHJcblxyXG4gICAgICAgIGlmIChzZWFyY2ggPT0gXCJcIil7XHJcbiAgICAgICAgICAgIGFsZXJ0KFwi4Lih4Li14LiK4LmI4Lit4LiH4Lin4LmI4Liy4LiH4LiZ4Liw4LmE4Lit4LmJ4LmC4LiH4LmIIC4uLi4uXCIpO1xyXG4gICAgICAgIH1lbHNle1xyXG5cclxuICAgICAgICAgICAgY29uc29sZS5sb2coXCJDaGVjayA9PT4gXCIgLCBcIlNlbGVjdCA9PT0+IFwiICsgc2VhcmNoKTtcclxuICAgICAgICAgICAgdmFyIGRlbFBvcCA9IHNlbGYud29yZF9saXN0Mi5sZW5ndGg7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiZGVscG9wIGxlbmd0aCA9PT5cIiAsIGRlbFBvcCk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgICAgIGlmKGRlbFBvcCA+MCApe1xyXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAgOyBpIDwgZGVsUG9wIDsgaSsrKXtcclxuICAgICAgICAgICAgICAgICAgICBzZWxmLndvcmRfbGlzdDIucG9wKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgIHZhciB0ZW1wID0gc2VhcmNoK1wiJVwiO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgc2VsZi5kYXRhYmFzZS5hbGwoXCJTRUxFQ1QgKiBGUk9NIGRpY3QgV0hFUkUgZW5nV29ybGQgTElLRSAoPykgb3IgdGhhaVdvcmxkIExJS0UgKD8pXCIsW3RlbXAsdGVtcF0gKS50aGVuKHJvd3MgPT57XHJcbiAgICAgICAgICAgICAgICBpZihyb3dzID09XCJcIil7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJub3Qgd29yZCA9PT0+ICBcIiArIHJvd3MgKyBcImlzIFwiICsgc2VhcmNoKTtcclxuICAgICAgICAgICAgICAgICAgICBhbGVydChcIuC5hOC4oeC5iOC4oeC4teC4hOC4s+C4p+C5iOC4siBcIiArIHNlYXJjaCArIFwiIOC5g+C4meC4kOC4suC4meC4guC5ieC4reC4oeC4ueC4pVwiKTtcclxuICAgICAgICAgICAgICAgIH1lbHNle1xyXG4gICAgICAgICAgICAgICAgICAgIHNlbGYud29yZF9zZWFyY2ggPSBcIlwiO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICBzZWxmLndvcmRfbGlzdCA9IHJvd3M7XHJcbiAgICAgICAgICAgICAgICBmb3IodmFyIHJvdyBpbiByb3dzKXtcclxuICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2cocm93c1tyb3ddKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IG1vZGVsX2l0ZW0gOiBJdGVtID0gbmV3IEl0ZW0oKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgbW9kZWxfaXRlbS5pZCA9IHJvd3Nbcm93XVswXTtcclxuICAgICAgICAgICAgICAgICAgICBtb2RlbF9pdGVtLndvcmRFbmcgPSByb3dzW3Jvd11bMV07XHJcbiAgICAgICAgICAgICAgICAgICAgbW9kZWxfaXRlbS53b3JkVGhhaSA9IHJvd3Nbcm93XVsyXTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2cocm93c1tyb3ddWzBdICtcIiBcIiArIHJvd3Nbcm93XVsxXSArXCIgXCIgKyByb3dzW3Jvd11bMl0gK1wiXCIgKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgc2VsZi53b3JkX2xpc3QyLnB1c2gobW9kZWxfaXRlbSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSxlcnJvciA9PntcclxuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIlNFTEVDVCBFUlJPUiBcIiAsIGVycm9yKTtcclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICB9XHJcblxyXG4gICAgYnRuU2VsZWN0UmFuZG9tKCl7XHJcbiAgICAgICAgLy9jb25zb2xlLmxvZyhcIlNlbGVjdCBSYW5kb21cIik7XHJcblxyXG4gICAgICAgIHRoaXMuZGF0YWJhc2UuYWxsKFwiU0VMRUNUICogRlJPTSBkaWN0IE9SREVSIEJZIFJBTkRPTSgpIExJTUlUIDFcIikudGhlbihyb3dzID0+e1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhyb3dzKTtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiZW5nX3dvcmQgPT0+IFwiICwgcm93c1swXVsxXSk7IC8vIHJlc3VsdCBlbmdcclxuICAgICAgICAgICAgdGhpcy5lbmdfcmFuZCA9IHJvd3NbMF1bMV07XHJcbiAgICAgICAgICAgIC8vdGhpcy5pdGVtcy53b3JkRW5nID0gcm93c1swXVsxXTtcclxuICAgICAgICAgICAgLy9jb25zb2xlLmxvZyhcImVuZ193b3JkIElURU0gPT0+IFwiICwgdGhpcy5pdGVtcy53b3JkRW5nKTsgLy8gcmVzdWx0IGVuZ1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgY29uc29sZS5sb2coXCJ0aGFpX3dvcmQgPT0+IFwiICwgcm93c1swXVsyXSk7IC8vcmVzdWx0IHRoYWlcclxuICAgICAgICAgICAgdGhpcy50aGFpX3JhbmQgPSByb3dzWzBdWzJdO1xyXG4gICAgICAgICAgICAvL3RoaXMuaXRlbXMud29yZFRoYWkgPSByb3dzWzBdWzJdO1xyXG4gICAgICAgICAgICAvL2NvbnNvbGUubG9nKFwiZW5nX3RoYWkgSVRFTSA9PT4gXCIgLCB0aGlzLml0ZW1zLndvcmRUaGFpKTsgLy8gcmVzdWx0IGVuZ1xyXG5cclxuXHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwidHlwZSB3b3JkID09PiBcIiAsIHJvd3NbMF1bM10pOyAvL3Jlc3VsdCB0eXBlXHJcbiAgICAgICAgICAgIHRoaXMudHlwZV9yYW5kID0gcm93c1swXVszXTtcclxuICAgICAgICAgICAgLy90aGlzLml0ZW1zLndvcmRUeXBlID0gcm93c1swXVszXTtcclxuICAgICAgICAgICAgLy9jb25zb2xlLmxvZyhcImVuZ190eXBlIElURU0gPT0+IFwiICwgdGhpcy5pdGVtcy53b3JkVHlwZSk7IC8vIHJlc3VsdCBlbmdcclxuXHJcbiAgICAgICAgICAgIC8qZm9yKHZhciByb3cgaW4gcm93cyl7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIlJlc3VsdCA9PXZcIik7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJyZXN1bHQgYWxsID09PiBcIiAsIHJvd3NbMF1bMF0pOy8vcmVzdWx0IGFsbFxyXG5cclxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiZW5nX3dvcmQgPT0+IFwiICwgcm93c1tyb3ddWzFdKTsgLy8gcmVzdWx0IGVuZ1xyXG4gICAgICAgICAgICAgICAgdGhpcy5lbmdfcmFuZCA9IHJvd3Nbcm93XVsxXTtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcInRoYWlfd29yZCA9PT4gXCIgLCByb3dzW3Jvd11bMl0pOyAvL3Jlc3VsdCB0aGFpXHJcbiAgICAgICAgICAgICAgICB0aGlzLnRoYWlfcmFuZCA9IHJvd3Nbcm93XVsyXTtcclxuXHJcblxyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJ0eXBlIHdvcmQgPT0+IFwiICwgcm93c1tyb3ddWzNdKTsgLy9yZXN1bHQgdHlwZVxyXG4gICAgICAgICAgICAgICAgdGhpcy50eXBlX3JhbmQgPSByb3dzW3Jvd11bM107XHJcbiAgICAgICAgICAgIH0qL1xyXG4gICAgICAgICAgICAvKmZvcih2YXIgaT0wIDsgaSA8IHJvd3MubGVuZ3RoIDsgaSsrICl7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJyZXN1bHQgZm9yIHJvdyA9PT5cIiAsIHJvd3NbaV0pOyBcclxuICAgICAgICAgICAgICAgIH0qL1xyXG5cclxuXHJcbiAgICAgICAgICAgIC8vdGhpcy5lbmdfcmFuZCA9IHJvd3NbMV07XHJcblxyXG4gICAgICAgIH0sZXJyb3IgPT57XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiU0VMRUNUIEVSUk9SIFwiICwgZXJyb3IpO1xyXG4gICAgICAgIH0pXHJcblxyXG4gICAgICAgIFxyXG4gICAgfVxyXG4gICAgXHJcblxyXG4gICAgXHJcblxyXG5cclxuIH1cclxuIl19