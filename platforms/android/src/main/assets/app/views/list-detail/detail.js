"use strict";
var core_1 = require("@angular/core");
var router_1 = require("@angular/router");
var dialogs = require("ui/dialogs");
var Sqlite = require("nativescript-sqlite");
var ListDetailComponent = (function () {
    function ListDetailComponent(route) {
        this.route = route;
        var self = this;
        this.route.queryParams.subscribe(function (params) {
            console.log(JSON.stringify(params));
            self.word = JSON.parse(params["words"]);
            console.log(self.word.id);
            console.log(self.word.wordEng);
            console.log(self.word.wordThai);
            console.log(self.word.wordType);
            console.log(self.word.wordFavorite);
            self.favorite = self.word.wordFavorite;
            self.word.wordType = "[" + self.word.wordType + "]";
        });
    }
    ListDetailComponent.prototype.ngOnInit = function () {
        var _this = this;
        new Sqlite("dicts.db").then(function (db) {
            _this.database = db;
            console.log("Open database Success");
        }, function (error) {
            console.log("Open DB ERROR", error);
        });
    };
    ListDetailComponent.prototype.myFavorite = function () {
        console.log("click Favorite");
        var self = this;
        if (self.favorite == 0) {
            self.favorite = 1;
            self.database.execSQL("UPDATE dict SET favorite = (?) WHERE id = (?)", [self.favorite, self.word.id], function (err, db) {
                if (err) {
                    console.log("error is == > ", err);
                }
                else {
                    console.log("Update Success");
                }
            });
        }
        else if (self.favorite == 1) {
            self.favorite = 0;
            self.database.execSQL("UPDATE dict SET favorite = (?) WHERE id = (?)", [self.favorite, self.word.id], function (err, db) {
                if (err) {
                    console.log("error is == > ", err);
                }
                else {
                    console.log("Update Success");
                }
            });
        }
    };
    return ListDetailComponent;
}());
ListDetailComponent = __decorate([
    core_1.Component({
        selector: "ns-app",
        templateUrl: "views/list-detail/detail.html",
    }),
    __metadata("design:paramtypes", [router_1.ActivatedRoute])
], ListDetailComponent);
exports.ListDetailComponent = ListDetailComponent;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGV0YWlsLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiZGV0YWlsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxzQ0FBa0Q7QUFHbEQsMENBQWlEO0FBR2pELElBQUksT0FBTyxHQUFHLE9BQU8sQ0FBQyxZQUFZLENBQUMsQ0FBQztBQUNwQyxJQUFJLE1BQU0sR0FBRyxPQUFPLENBQUMscUJBQXFCLENBQUMsQ0FBQztBQU01QyxJQUFhLG1CQUFtQjtJQVMzQiw2QkFBMkIsS0FBcUI7UUFBckIsVUFBSyxHQUFMLEtBQUssQ0FBZ0I7UUFDN0MsSUFBSSxJQUFJLEdBQUcsSUFBSSxDQUFDO1FBQ2hCLElBQUksQ0FBQyxLQUFLLENBQUMsV0FBVyxDQUFDLFNBQVMsQ0FBQyxVQUFBLE1BQU07WUFDdkMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxDQUFFLENBQUM7WUFDckMsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO1lBRXhDLE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQztZQUMxQixPQUFPLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7WUFDL0IsT0FBTyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1lBQ2hDLE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztZQUNoQyxPQUFPLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUM7WUFFcEMsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQztZQUV2QyxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsR0FBRyxHQUFHLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLEdBQUcsR0FBRyxDQUFDO1FBQ3BELENBQUMsQ0FBQyxDQUFDO0lBQ1AsQ0FBQztJQUVELHNDQUFRLEdBQVI7UUFBQSxpQkFRQztRQVBHLElBQUksTUFBTSxDQUFDLFVBQVUsQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFBLEVBQUU7WUFDMUIsS0FBSSxDQUFDLFFBQVEsR0FBRyxFQUFFLENBQUM7WUFDbkIsT0FBTyxDQUFDLEdBQUcsQ0FBQyx1QkFBdUIsQ0FBQyxDQUFDO1FBRXpDLENBQUMsRUFBQyxVQUFBLEtBQUs7WUFDSCxPQUFPLENBQUMsR0FBRyxDQUFDLGVBQWUsRUFBRyxLQUFLLENBQUMsQ0FBQztRQUN6QyxDQUFDLENBQUMsQ0FBQTtJQUNOLENBQUM7SUFFRCx3Q0FBVSxHQUFWO1FBQ0ksT0FBTyxDQUFDLEdBQUcsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO1FBQzlCLElBQUksSUFBSSxHQUFHLElBQUksQ0FBQztRQUNoQixFQUFFLENBQUEsQ0FBQyxJQUFJLENBQUMsUUFBUSxJQUFJLENBQUUsQ0FBQyxDQUFBLENBQUM7WUFDcEIsSUFBSSxDQUFDLFFBQVEsR0FBRyxDQUFDLENBQUM7WUFDbEIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsK0NBQStDLEVBQUUsQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLEVBQUcsVUFBUyxHQUFHLEVBQUcsRUFBRTtnQkFDekgsRUFBRSxDQUFBLENBQUMsR0FBRyxDQUFDLENBQUEsQ0FBQztvQkFDSixPQUFPLENBQUMsR0FBRyxDQUFDLGdCQUFnQixFQUFHLEdBQUcsQ0FBQyxDQUFDO2dCQUN4QyxDQUFDO2dCQUFBLElBQUksQ0FBQSxDQUFDO29CQUNGLE9BQU8sQ0FBQyxHQUFHLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztnQkFFbEMsQ0FBQztZQUNMLENBQUMsQ0FBQyxDQUFDO1FBRUgsQ0FBQztRQUFBLElBQUksQ0FBQyxFQUFFLENBQUEsQ0FBQyxJQUFJLENBQUMsUUFBUSxJQUFJLENBQUMsQ0FBQyxDQUFBLENBQUM7WUFDekIsSUFBSSxDQUFDLFFBQVEsR0FBRyxDQUFDLENBQUU7WUFDbkIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsK0NBQStDLEVBQUUsQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLEVBQUcsVUFBUyxHQUFHLEVBQUcsRUFBRTtnQkFDckgsRUFBRSxDQUFBLENBQUMsR0FBRyxDQUFDLENBQUEsQ0FBQztvQkFDSixPQUFPLENBQUMsR0FBRyxDQUFDLGdCQUFnQixFQUFHLEdBQUcsQ0FBQyxDQUFDO2dCQUN4QyxDQUFDO2dCQUFBLElBQUksQ0FBQSxDQUFDO29CQUNGLE9BQU8sQ0FBQyxHQUFHLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztnQkFFbEMsQ0FBQztZQUNMLENBQUMsQ0FBQyxDQUFDO1FBQ1AsQ0FBQztJQUVMLENBQUM7SUFHSiwwQkFBQztBQUFELENBQUMsQUFsRUYsSUFrRUU7QUFsRVcsbUJBQW1CO0lBSi9CLGdCQUFTLENBQUM7UUFDUCxRQUFRLEVBQUUsUUFBUTtRQUNsQixXQUFXLEVBQUUsK0JBQStCO0tBQy9DLENBQUM7cUNBVXFDLHVCQUFjO0dBVHhDLG1CQUFtQixDQWtFOUI7QUFsRVcsa0RBQW1CIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBPbkluaXQgfSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xyXG5pbXBvcnQgeyBQYWdlUm91dGUgfSBmcm9tIFwibmF0aXZlc2NyaXB0LWFuZ3VsYXIvcm91dGVyXCI7IFxyXG5pbXBvcnQgeyBSb3V0ZXIgfSBmcm9tIFwiQGFuZ3VsYXIvcm91dGVyXCI7XHJcbmltcG9ydCB7IEFjdGl2YXRlZFJvdXRlIH0gZnJvbSBcIkBhbmd1bGFyL3JvdXRlclwiO1xyXG5pbXBvcnQgeyBJdGVtIH0gZnJvbSBcIi4uLy4uL21vZGVscy9pdGVtcy9pdGVtXCI7XHJcblxyXG52YXIgZGlhbG9ncyA9IHJlcXVpcmUoXCJ1aS9kaWFsb2dzXCIpO1xyXG52YXIgU3FsaXRlID0gcmVxdWlyZShcIm5hdGl2ZXNjcmlwdC1zcWxpdGVcIik7XHJcblxyXG5AQ29tcG9uZW50KHtcclxuICAgIHNlbGVjdG9yOiBcIm5zLWFwcFwiLFxyXG4gICAgdGVtcGxhdGVVcmw6IFwidmlld3MvbGlzdC1kZXRhaWwvZGV0YWlsLmh0bWxcIixcclxufSlcclxuZXhwb3J0IGNsYXNzIExpc3REZXRhaWxDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQge1xyXG4gXHJcbiAgICB3b3JkOkl0ZW07XHJcbiAgICBmYXZvcml0ZSA6IGFueSA7XHJcblxyXG5cclxuXHJcbiAgICBwcml2YXRlIGRhdGFiYXNlO1xyXG5cclxuICAgICBwdWJsaWMgY29uc3RydWN0b3IocHJpdmF0ZSByb3V0ZTogQWN0aXZhdGVkUm91dGUpIHtcclxuICAgICAgICBsZXQgc2VsZiA9IHRoaXM7XHJcbiAgICAgICAgdGhpcy5yb3V0ZS5xdWVyeVBhcmFtcy5zdWJzY3JpYmUocGFyYW1zID0+IHtcclxuICAgICAgICBjb25zb2xlLmxvZyhKU09OLnN0cmluZ2lmeShwYXJhbXMpICk7XHJcbiAgICAgICAgc2VsZi53b3JkID0gSlNPTi5wYXJzZShwYXJhbXNbXCJ3b3Jkc1wiXSk7ICBcclxuXHJcbiAgICAgICAgY29uc29sZS5sb2coc2VsZi53b3JkLmlkKTtcclxuICAgICAgICBjb25zb2xlLmxvZyhzZWxmLndvcmQud29yZEVuZyk7XHJcbiAgICAgICAgY29uc29sZS5sb2coc2VsZi53b3JkLndvcmRUaGFpKTtcclxuICAgICAgICBjb25zb2xlLmxvZyhzZWxmLndvcmQud29yZFR5cGUpO1xyXG4gICAgICAgIGNvbnNvbGUubG9nKHNlbGYud29yZC53b3JkRmF2b3JpdGUpO1xyXG4gICAgICAgIFxyXG4gICAgICAgIHNlbGYuZmF2b3JpdGUgPSBzZWxmLndvcmQud29yZEZhdm9yaXRlO1xyXG4gICAgXHJcbiAgICAgICAgc2VsZi53b3JkLndvcmRUeXBlID0gXCJbXCIgKyBzZWxmLndvcmQud29yZFR5cGUgKyBcIl1cIjtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBuZ09uSW5pdCgpe1xyXG4gICAgICAgIG5ldyBTcWxpdGUoXCJkaWN0cy5kYlwiKS50aGVuKGRiID0+e1xyXG4gICAgICAgICAgICB0aGlzLmRhdGFiYXNlID0gZGI7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiT3BlbiBkYXRhYmFzZSBTdWNjZXNzXCIpO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICB9LGVycm9yID0+e1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcIk9wZW4gREIgRVJST1JcIiAsIGVycm9yKTtcclxuICAgICAgICB9KVxyXG4gICAgfVxyXG5cclxuICAgIG15RmF2b3JpdGUoKXtcclxuICAgICAgICBjb25zb2xlLmxvZyhcImNsaWNrIEZhdm9yaXRlXCIpO1xyXG4gICAgICAgIGxldCBzZWxmID0gdGhpcztcclxuICAgICAgICBpZihzZWxmLmZhdm9yaXRlID09IDAgKXtcclxuICAgICAgICAgICAgc2VsZi5mYXZvcml0ZSA9IDE7XHJcbiAgICAgICAgICAgIHNlbGYuZGF0YWJhc2UuZXhlY1NRTChcIlVQREFURSBkaWN0IFNFVCBmYXZvcml0ZSA9ICg/KSBXSEVSRSBpZCA9ICg/KVwiICxbc2VsZi5mYXZvcml0ZSAsIHNlbGYud29yZC5pZF0gLCBmdW5jdGlvbihlcnIgLCBkYiApe1xyXG4gICAgICAgICAgICBpZihlcnIpe1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJlcnJvciBpcyA9PSA+IFwiICwgZXJyKTtcclxuICAgICAgICAgICAgfWVsc2V7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIlVwZGF0ZSBTdWNjZXNzXCIpO1xyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgfWVsc2UgaWYoc2VsZi5mYXZvcml0ZSA9PSAxKXtcclxuICAgICAgICAgICAgc2VsZi5mYXZvcml0ZSA9IDAgO1xyXG4gICAgICAgICAgICBzZWxmLmRhdGFiYXNlLmV4ZWNTUUwoXCJVUERBVEUgZGljdCBTRVQgZmF2b3JpdGUgPSAoPykgV0hFUkUgaWQgPSAoPylcIiAsW3NlbGYuZmF2b3JpdGUgLCBzZWxmLndvcmQuaWRdICwgZnVuY3Rpb24oZXJyICwgZGIgKXtcclxuICAgICAgICAgICAgICAgIGlmKGVycil7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJlcnJvciBpcyA9PSA+IFwiICwgZXJyKTtcclxuICAgICAgICAgICAgICAgIH1lbHNle1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiVXBkYXRlIFN1Y2Nlc3NcIik7XHJcbiAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIFxyXG4gICAgfVxyXG5cdCAgXHJcbiAgICBcclxuIH1cclxuIl19