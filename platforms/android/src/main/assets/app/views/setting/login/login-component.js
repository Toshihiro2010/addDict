"use strict";
var core_1 = require("@angular/core");
var http = require("http");
var Toast = require("nativescript-toast");
var LoginComponent = (function () {
    function LoginComponent() {
        this.username = "";
        this.password = "";
        this.strURL = "http://192.9.9.112:30";
    }
    LoginComponent.prototype.btnLogin = function () {
        var self = this;
        var checkEmpty = self.checkEmpty();
        console.log("empty word  ==>", checkEmpty);
        if (checkEmpty == true) {
            http.request({
                url: self.strURL + "/login/" + self.username + "/" + self.password,
                method: "GET"
            }).then(function (response) {
                var statusCode = response.statusCode;
                if (statusCode != 200) {
                    var toast = Toast.makeText("ไม่มี user และ password นี้ในระบบ");
                    toast.show();
                }
                else {
                    try {
                        var obj = response.content.toJSON();
                        console.log(JSON.stringify(obj));
                    }
                    catch (err) {
                        console.log(err);
                    }
                }
                console.log("status code => ", statusCode);
            }, function (e) {
                console.log("error is ", e);
            });
        }
    };
    LoginComponent.prototype.btnCheck = function () {
        var self = this;
        var result;
        http.request({
            url: self.strURL + "/users/1",
            method: "GET"
        }).then(function (response) {
            var obj = response.content.toJSON();
            var statusCode = response.statusCode;
            console.log("status code => ", statusCode);
            console.log(JSON.stringify(obj));
        }, function (e) {
            console.log("error is ", e);
        });
    };
    LoginComponent.prototype.httpLogin = function () {
        console.log("on => http Login");
        var self = this;
    };
    LoginComponent.prototype.checkEmpty = function () {
        var self = this;
        console.log("username ===> ", self.username);
        console.log("password ===> ", self.password);
        if (self.username.trim() == "" || self.password.trim() == "") {
            var toast = Toast.makeText("มีช่องว่างนะไอ้โง่");
            toast.show();
            return false;
        }
        else {
            return true;
        }
    };
    return LoginComponent;
}());
LoginComponent = __decorate([
    core_1.Component({
        selector: "Login",
        templateUrl: "views/setting/login/login-component.html",
    })
], LoginComponent);
exports.LoginComponent = LoginComponent;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9naW4tY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsibG9naW4tY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxzQ0FBMEM7QUFJMUMsSUFBSSxJQUFJLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBQzNCLElBQUksS0FBSyxHQUFHLE9BQU8sQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDO0FBTTFDLElBQWEsY0FBYztJQUozQjtRQU1ZLGFBQVEsR0FBWSxFQUFFLENBQUM7UUFDdkIsYUFBUSxHQUFZLEVBQUUsQ0FBQztRQUV2QixXQUFNLEdBQVksdUJBQXVCLENBQUM7SUErRXRELENBQUM7SUE3RVcsaUNBQVEsR0FBaEI7UUFDSSxJQUFJLElBQUksR0FBRyxJQUFJLENBQUM7UUFDaEIsSUFBSSxVQUFVLEdBQUcsSUFBSSxDQUFDLFVBQVUsRUFBRSxDQUFDO1FBQ25DLE9BQU8sQ0FBQyxHQUFHLENBQUMsaUJBQWlCLEVBQUcsVUFBVSxDQUFDLENBQUM7UUFDNUMsRUFBRSxDQUFBLENBQUUsVUFBVSxJQUFJLElBQUksQ0FBQyxDQUFBLENBQUM7WUFFcEIsSUFBSSxDQUFDLE9BQU8sQ0FBQztnQkFDVCxHQUFHLEVBQUUsSUFBSSxDQUFDLE1BQU0sR0FBRSxTQUFTLEdBQUUsSUFBSSxDQUFDLFFBQVEsR0FBRyxHQUFHLEdBQUMsSUFBSSxDQUFDLFFBQVE7Z0JBQzlELE1BQU0sRUFBRSxLQUFLO2FBQ2hCLENBQUMsQ0FBQyxJQUFJLENBQUMsVUFBVSxRQUFRO2dCQUN0QixJQUFJLFVBQVUsR0FBRyxRQUFRLENBQUMsVUFBVSxDQUFDO2dCQUNyQyxFQUFFLENBQUEsQ0FBQyxVQUFVLElBQUksR0FBRyxDQUFDLENBQUEsQ0FBQztvQkFFbEIsSUFBSSxLQUFLLEdBQUcsS0FBSyxDQUFDLFFBQVEsQ0FBQyxtQ0FBbUMsQ0FBQyxDQUFDO29CQUNoRSxLQUFLLENBQUMsSUFBSSxFQUFFLENBQUM7Z0JBRWpCLENBQUM7Z0JBQUEsSUFBSSxDQUFBLENBQUM7b0JBQ0YsSUFBSSxDQUFDO3dCQUNELElBQUksR0FBRyxHQUFHLFFBQVEsQ0FBQyxPQUFPLENBQUMsTUFBTSxFQUFFLENBQUM7d0JBQ3BDLE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO29CQUNyQyxDQUFDO29CQUNELEtBQUssQ0FBQSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7d0JBQ1IsT0FBTyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztvQkFDckIsQ0FBQztnQkFDTCxDQUFDO2dCQUNELE9BQU8sQ0FBQyxHQUFHLENBQUMsaUJBQWlCLEVBQUcsVUFBVSxDQUFDLENBQUM7WUFFaEQsQ0FBQyxFQUFFLFVBQVUsQ0FBQztnQkFDVixPQUFPLENBQUMsR0FBRyxDQUFDLFdBQVcsRUFBRyxDQUFDLENBQUMsQ0FBQztZQUNqQyxDQUFDLENBQUMsQ0FBQztRQUNQLENBQUM7SUFFTCxDQUFDO0lBQ08saUNBQVEsR0FBaEI7UUFDSSxJQUFJLElBQUksR0FBRyxJQUFJLENBQUM7UUFDaEIsSUFBSSxNQUFNLENBQUM7UUFDWCxJQUFJLENBQUMsT0FBTyxDQUFDO1lBQ0wsR0FBRyxFQUFFLElBQUksQ0FBQyxNQUFNLEdBQUUsVUFBVTtZQUM1QixNQUFNLEVBQUUsS0FBSztTQUNwQixDQUFDLENBQUMsSUFBSSxDQUFDLFVBQVUsUUFBUTtZQUN0QixJQUFJLEdBQUcsR0FBRyxRQUFRLENBQUMsT0FBTyxDQUFDLE1BQU0sRUFBRSxDQUFDO1lBQ3BDLElBQUksVUFBVSxHQUFHLFFBQVEsQ0FBQyxVQUFVLENBQUM7WUFFckMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxpQkFBaUIsRUFBRyxVQUFVLENBQUMsQ0FBQztZQUM1QyxPQUFPLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztRQUVyQyxDQUFDLEVBQUUsVUFBVSxDQUFDO1lBRVYsT0FBTyxDQUFDLEdBQUcsQ0FBQyxXQUFXLEVBQUcsQ0FBQyxDQUFDLENBQUM7UUFDakMsQ0FBQyxDQUFDLENBQUM7SUFFUCxDQUFDO0lBRU8sa0NBQVMsR0FBakI7UUFDSSxPQUFPLENBQUMsR0FBRyxDQUFDLGtCQUFrQixDQUFDLENBQUM7UUFDaEMsSUFBSSxJQUFJLEdBQUcsSUFBSSxDQUFDO0lBRXBCLENBQUM7SUFFTyxtQ0FBVSxHQUFsQjtRQUNJLElBQUksSUFBSSxHQUFHLElBQUksQ0FBQztRQUNoQixPQUFPLENBQUMsR0FBRyxDQUFDLGdCQUFnQixFQUFHLElBQUksQ0FBQyxRQUFRLENBQUUsQ0FBQztRQUMvQyxPQUFPLENBQUMsR0FBRyxDQUFDLGdCQUFnQixFQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUU5QyxFQUFFLENBQUEsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxJQUFHLEVBQUUsQ0FBQyxDQUFBLENBQUM7WUFFeEQsSUFBSSxLQUFLLEdBQUcsS0FBSyxDQUFDLFFBQVEsQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDO1lBQ2pELEtBQUssQ0FBQyxJQUFJLEVBQUUsQ0FBQztZQUNiLE1BQU0sQ0FBQyxLQUFLLENBQUM7UUFDakIsQ0FBQztRQUFBLElBQUksQ0FBQSxDQUFDO1lBQ0YsTUFBTSxDQUFDLElBQUksQ0FBQztRQUNoQixDQUFDO0lBRUwsQ0FBQztJQUlMLHFCQUFDO0FBQUQsQ0FBQyxBQXBGRCxJQW9GQztBQXBGWSxjQUFjO0lBSjFCLGdCQUFTLENBQUM7UUFDUCxRQUFRLEVBQUUsT0FBTztRQUNqQixXQUFXLEVBQUUsMENBQTBDO0tBQzFELENBQUM7R0FDVyxjQUFjLENBb0YxQjtBQXBGWSx3Q0FBYyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCB9IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XHJcbmltcG9ydCB7IFVzZXJzIH0gZnJvbSBcIi4uLy4uLy4uL21vZGVscy91c2Vycy91c2Vyc1wiO1xyXG5cclxuXHJcbnZhciBodHRwID0gcmVxdWlyZShcImh0dHBcIik7XHJcbnZhciBUb2FzdCA9IHJlcXVpcmUoXCJuYXRpdmVzY3JpcHQtdG9hc3RcIik7XHJcblxyXG5AQ29tcG9uZW50KHtcclxuICAgIHNlbGVjdG9yOiBcIkxvZ2luXCIsXHJcbiAgICB0ZW1wbGF0ZVVybDogXCJ2aWV3cy9zZXR0aW5nL2xvZ2luL2xvZ2luLWNvbXBvbmVudC5odG1sXCIsXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBMb2dpbkNvbXBvbmVudCB7XHJcblxyXG4gICAgcHJpdmF0ZSB1c2VybmFtZSA6IHN0cmluZyA9IFwiXCI7XHJcbiAgICBwcml2YXRlIHBhc3N3b3JkIDogc3RyaW5nID0gXCJcIjtcclxuXHJcbiAgICBwcml2YXRlIHN0clVSTCA6IHN0cmluZyA9IFwiaHR0cDovLzE5Mi45LjkuMTEyOjMwXCI7XHJcblxyXG4gICAgcHJpdmF0ZSBidG5Mb2dpbigpe1xyXG4gICAgICAgIGxldCBzZWxmID0gdGhpcztcclxuICAgICAgICB2YXIgY2hlY2tFbXB0eSA9IHNlbGYuY2hlY2tFbXB0eSgpO1xyXG4gICAgICAgIGNvbnNvbGUubG9nKFwiZW1wdHkgd29yZCAgPT0+XCIgLCBjaGVja0VtcHR5KTtcclxuICAgICAgICBpZiggY2hlY2tFbXB0eSA9PSB0cnVlKXtcclxuXHJcbiAgICAgICAgICAgIGh0dHAucmVxdWVzdCh7IFxyXG4gICAgICAgICAgICAgICAgdXJsOiBzZWxmLnN0clVSTCArXCIvbG9naW4vXCIrIHNlbGYudXNlcm5hbWUgKyBcIi9cIitzZWxmLnBhc3N3b3JkLCBcclxuICAgICAgICAgICAgICAgIG1ldGhvZDogXCJHRVRcIiBcclxuICAgICAgICAgICAgfSkudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgIHZhciBzdGF0dXNDb2RlID0gcmVzcG9uc2Uuc3RhdHVzQ29kZTtcclxuICAgICAgICAgICAgICAgIGlmKHN0YXR1c0NvZGUgIT0gMjAwKXtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRvYXN0ID0gVG9hc3QubWFrZVRleHQoXCLguYTguKHguYjguKHguLUgdXNlciDguYHguKXguLAgcGFzc3dvcmQg4LiZ4Li14LmJ4LmD4LiZ4Lij4Liw4Lia4LiaXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRvYXN0LnNob3coKTtcclxuXHJcbiAgICAgICAgICAgICAgICB9ZWxzZXtcclxuICAgICAgICAgICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgb2JqID0gcmVzcG9uc2UuY29udGVudC50b0pTT04oKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coSlNPTi5zdHJpbmdpZnkob2JqKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGNhdGNoKGVycikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhlcnIpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwic3RhdHVzIGNvZGUgPT4gXCIgLCBzdGF0dXNDb2RlKTtcclxuICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICB9LCBmdW5jdGlvbiAoZSkgey8vLy8gQXJndW1lbnQgKGUpIGlzIEVycm9yIVxyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJlcnJvciBpcyBcIiAsIGUpOyAgXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBcclxuICAgIH1cclxuICAgIHByaXZhdGUgYnRuQ2hlY2soKXtcclxuICAgICAgICBsZXQgc2VsZiA9IHRoaXM7XHJcbiAgICAgICAgdmFyIHJlc3VsdDtcclxuICAgICAgICBodHRwLnJlcXVlc3QoeyBcclxuICAgICAgICAgICAgICAgIHVybDogc2VsZi5zdHJVUkwgK1wiL3VzZXJzLzFcIiAsIFxyXG4gICAgICAgICAgICAgICAgbWV0aG9kOiBcIkdFVFwiIFxyXG4gICAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgIHZhciBvYmogPSByZXNwb25zZS5jb250ZW50LnRvSlNPTigpO1xyXG4gICAgICAgICAgICB2YXIgc3RhdHVzQ29kZSA9IHJlc3BvbnNlLnN0YXR1c0NvZGU7XHJcblxyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcInN0YXR1cyBjb2RlID0+IFwiICwgc3RhdHVzQ29kZSk7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKEpTT04uc3RyaW5naWZ5KG9iaikpO1xyXG5cclxuICAgICAgICB9LCBmdW5jdGlvbiAoZSkgey8vLy8gQXJndW1lbnQgKGUpIGlzIEVycm9yIVxyXG5cclxuICAgICAgICAgICAgY29uc29sZS5sb2coXCJlcnJvciBpcyBcIiAsIGUpOyAgXHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgaHR0cExvZ2luKCl7XHJcbiAgICAgICAgY29uc29sZS5sb2coXCJvbiA9PiBodHRwIExvZ2luXCIpO1xyXG4gICAgICAgIGxldCBzZWxmID0gdGhpcztcclxuXHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBjaGVja0VtcHR5KCl7XHJcbiAgICAgICAgbGV0IHNlbGYgPSB0aGlzO1xyXG4gICAgICAgIGNvbnNvbGUubG9nKFwidXNlcm5hbWUgPT09PiBcIiAsIHNlbGYudXNlcm5hbWUgKTtcclxuICAgICAgICBjb25zb2xlLmxvZyhcInBhc3N3b3JkID09PT4gXCIgLCBzZWxmLnBhc3N3b3JkKTtcclxuXHJcbiAgICAgICAgaWYoc2VsZi51c2VybmFtZS50cmltKCkgPT0gXCJcIiB8fCBzZWxmLnBhc3N3b3JkLnRyaW0oKSA9PVwiXCIpe1xyXG4gICAgICAgICBcclxuICAgICAgICAgICAgdmFyIHRvYXN0ID0gVG9hc3QubWFrZVRleHQoXCLguKHguLXguIrguYjguK3guIfguKfguYjguLLguIfguJnguLDguYTguK3guYnguYLguIfguYhcIik7XHJcbiAgICAgICAgICAgIHRvYXN0LnNob3coKTtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1lbHNle1xyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgXHJcbiAgICB9XHJcblxyXG5cclxuXHJcbn1cclxuIl19