"use strict";
var core_1 = require("@angular/core");
var http = require("http");
var Toast = require("nativescript-toast");
var LoginComponent = (function () {
    function LoginComponent() {
        this.username = "";
        this.password = "";
        this.strURL = "http://192.9.9.112:30";
    }
    LoginComponent.prototype.btnLogin = function () {
        var self = this;
        var checkEmpty = self.checkEmpty();
        console.log("empty word  ==>", checkEmpty);
        if (checkEmpty == true) {
            http.request({
                url: self.strURL + "/users/" + self.username,
                method: "GET"
            }).then(function (response) {
                var statusCode = response.statusCode;
                if (statusCode != 200) {
                }
                else {
                    var obj = response.content.toJSON();
                    console.log(JSON.stringify(obj));
                }
                console.log("status code => ", statusCode);
            }, function (e) {
                console.log("error is ", e);
            });
        }
    };
    LoginComponent.prototype.btnCheck = function () {
        var self = this;
        var result;
        http.request({
            url: self.strURL + "/users/1",
            method: "GET"
        }).then(function (response) {
            var obj = response.content.toJSON();
            var statusCode = response.statusCode;
            console.log("status code => ", statusCode);
            console.log(JSON.stringify(obj));
        }, function (e) {
            console.log("error is ", e);
        });
    };
    LoginComponent.prototype.httpLogin = function () {
        console.log("on => http Login");
        var self = this;
    };
    LoginComponent.prototype.checkEmpty = function () {
        var self = this;
        console.log("username ===> ", self.username);
        console.log("password ===> ", self.password);
        if (self.username.trim() == "" || self.password.trim() == "") {
            var toast = Toast.makeText("มีช่องว่างนะไอ้โง่");
            toast.show();
            return false;
        }
        else {
            return true;
        }
    };
    return LoginComponent;
}());
LoginComponent = __decorate([
    core_1.Component({
        selector: "Login",
        templateUrl: "views/setting/login/login-component.html",
    })
], LoginComponent);
exports.LoginComponent = LoginComponent;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9naW4tY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsibG9naW4tY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxzQ0FBMEM7QUFJMUMsSUFBSSxJQUFJLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBQzNCLElBQUksS0FBSyxHQUFHLE9BQU8sQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDO0FBTTFDLElBQWEsY0FBYztJQUozQjtRQU1ZLGFBQVEsR0FBWSxFQUFFLENBQUM7UUFDdkIsYUFBUSxHQUFZLEVBQUUsQ0FBQztRQUV2QixXQUFNLEdBQVksdUJBQXVCLENBQUM7SUFzRXRELENBQUM7SUFwRVcsaUNBQVEsR0FBaEI7UUFDSSxJQUFJLElBQUksR0FBRyxJQUFJLENBQUM7UUFDaEIsSUFBSSxVQUFVLEdBQUcsSUFBSSxDQUFDLFVBQVUsRUFBRSxDQUFDO1FBQ25DLE9BQU8sQ0FBQyxHQUFHLENBQUMsaUJBQWlCLEVBQUcsVUFBVSxDQUFDLENBQUM7UUFDNUMsRUFBRSxDQUFBLENBQUUsVUFBVSxJQUFJLElBQUksQ0FBQyxDQUFBLENBQUM7WUFDcEIsSUFBSSxDQUFDLE9BQU8sQ0FBQztnQkFDVCxHQUFHLEVBQUUsSUFBSSxDQUFDLE1BQU0sR0FBRSxTQUFTLEdBQUMsSUFBSSxDQUFDLFFBQVE7Z0JBQ3pDLE1BQU0sRUFBRSxLQUFLO2FBQ2hCLENBQUMsQ0FBQyxJQUFJLENBQUMsVUFBVSxRQUFRO2dCQUN0QixJQUFJLFVBQVUsR0FBRyxRQUFRLENBQUMsVUFBVSxDQUFDO2dCQUNyQyxFQUFFLENBQUEsQ0FBQyxVQUFVLElBQUksR0FBRyxDQUFDLENBQUEsQ0FBQztnQkFFdEIsQ0FBQztnQkFBQSxJQUFJLENBQUEsQ0FBQztvQkFDRixJQUFJLEdBQUcsR0FBRyxRQUFRLENBQUMsT0FBTyxDQUFDLE1BQU0sRUFBRSxDQUFDO29CQUNwQyxPQUFPLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztnQkFDckMsQ0FBQztnQkFDRCxPQUFPLENBQUMsR0FBRyxDQUFDLGlCQUFpQixFQUFHLFVBQVUsQ0FBQyxDQUFDO1lBRWhELENBQUMsRUFBRSxVQUFVLENBQUM7Z0JBQ1YsT0FBTyxDQUFDLEdBQUcsQ0FBQyxXQUFXLEVBQUcsQ0FBQyxDQUFDLENBQUM7WUFDakMsQ0FBQyxDQUFDLENBQUM7UUFDUCxDQUFDO0lBRUwsQ0FBQztJQUNPLGlDQUFRLEdBQWhCO1FBQ0ksSUFBSSxJQUFJLEdBQUcsSUFBSSxDQUFDO1FBQ2hCLElBQUksTUFBTSxDQUFDO1FBQ1gsSUFBSSxDQUFDLE9BQU8sQ0FBQztZQUNMLEdBQUcsRUFBRSxJQUFJLENBQUMsTUFBTSxHQUFFLFVBQVU7WUFDNUIsTUFBTSxFQUFFLEtBQUs7U0FDcEIsQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFVLFFBQVE7WUFDdEIsSUFBSSxHQUFHLEdBQUcsUUFBUSxDQUFDLE9BQU8sQ0FBQyxNQUFNLEVBQUUsQ0FBQztZQUNwQyxJQUFJLFVBQVUsR0FBRyxRQUFRLENBQUMsVUFBVSxDQUFDO1lBRXJDLE9BQU8sQ0FBQyxHQUFHLENBQUMsaUJBQWlCLEVBQUcsVUFBVSxDQUFDLENBQUM7WUFDNUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFFckMsQ0FBQyxFQUFFLFVBQVUsQ0FBQztZQUVWLE9BQU8sQ0FBQyxHQUFHLENBQUMsV0FBVyxFQUFHLENBQUMsQ0FBQyxDQUFDO1FBQ2pDLENBQUMsQ0FBQyxDQUFDO0lBRVAsQ0FBQztJQUVPLGtDQUFTLEdBQWpCO1FBQ0ksT0FBTyxDQUFDLEdBQUcsQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO1FBQ2hDLElBQUksSUFBSSxHQUFHLElBQUksQ0FBQztJQUVwQixDQUFDO0lBRU8sbUNBQVUsR0FBbEI7UUFDSSxJQUFJLElBQUksR0FBRyxJQUFJLENBQUM7UUFDaEIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxnQkFBZ0IsRUFBRyxJQUFJLENBQUMsUUFBUSxDQUFFLENBQUM7UUFDL0MsT0FBTyxDQUFDLEdBQUcsQ0FBQyxnQkFBZ0IsRUFBRyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7UUFFOUMsRUFBRSxDQUFBLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsSUFBRyxFQUFFLENBQUMsQ0FBQSxDQUFDO1lBRXhELElBQUksS0FBSyxHQUFHLEtBQUssQ0FBQyxRQUFRLENBQUMsb0JBQW9CLENBQUMsQ0FBQztZQUNqRCxLQUFLLENBQUMsSUFBSSxFQUFFLENBQUM7WUFDYixNQUFNLENBQUMsS0FBSyxDQUFDO1FBQ2pCLENBQUM7UUFBQSxJQUFJLENBQUEsQ0FBQztZQUNGLE1BQU0sQ0FBQyxJQUFJLENBQUM7UUFDaEIsQ0FBQztJQUVMLENBQUM7SUFJTCxxQkFBQztBQUFELENBQUMsQUEzRUQsSUEyRUM7QUEzRVksY0FBYztJQUoxQixnQkFBUyxDQUFDO1FBQ1AsUUFBUSxFQUFFLE9BQU87UUFDakIsV0FBVyxFQUFFLDBDQUEwQztLQUMxRCxDQUFDO0dBQ1csY0FBYyxDQTJFMUI7QUEzRVksd0NBQWMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQgfSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xyXG5pbXBvcnQgeyBVc2VycyB9IGZyb20gXCIuLi8uLi8uLi9tb2RlbHMvdXNlcnMvdXNlcnNcIjtcclxuXHJcblxyXG52YXIgaHR0cCA9IHJlcXVpcmUoXCJodHRwXCIpO1xyXG52YXIgVG9hc3QgPSByZXF1aXJlKFwibmF0aXZlc2NyaXB0LXRvYXN0XCIpO1xyXG5cclxuQENvbXBvbmVudCh7XHJcbiAgICBzZWxlY3RvcjogXCJMb2dpblwiLFxyXG4gICAgdGVtcGxhdGVVcmw6IFwidmlld3Mvc2V0dGluZy9sb2dpbi9sb2dpbi1jb21wb25lbnQuaHRtbFwiLFxyXG59KVxyXG5leHBvcnQgY2xhc3MgTG9naW5Db21wb25lbnQge1xyXG5cclxuICAgIHByaXZhdGUgdXNlcm5hbWUgOiBzdHJpbmcgPSBcIlwiO1xyXG4gICAgcHJpdmF0ZSBwYXNzd29yZCA6IHN0cmluZyA9IFwiXCI7XHJcblxyXG4gICAgcHJpdmF0ZSBzdHJVUkwgOiBzdHJpbmcgPSBcImh0dHA6Ly8xOTIuOS45LjExMjozMFwiO1xyXG5cclxuICAgIHByaXZhdGUgYnRuTG9naW4oKXtcclxuICAgICAgICBsZXQgc2VsZiA9IHRoaXM7XHJcbiAgICAgICAgdmFyIGNoZWNrRW1wdHkgPSBzZWxmLmNoZWNrRW1wdHkoKTtcclxuICAgICAgICBjb25zb2xlLmxvZyhcImVtcHR5IHdvcmQgID09PlwiICwgY2hlY2tFbXB0eSk7XHJcbiAgICAgICAgaWYoIGNoZWNrRW1wdHkgPT0gdHJ1ZSl7XHJcbiAgICAgICAgICAgIGh0dHAucmVxdWVzdCh7IFxyXG4gICAgICAgICAgICAgICAgdXJsOiBzZWxmLnN0clVSTCArXCIvdXNlcnMvXCIrc2VsZi51c2VybmFtZSAsIFxyXG4gICAgICAgICAgICAgICAgbWV0aG9kOiBcIkdFVFwiIFxyXG4gICAgICAgICAgICB9KS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgdmFyIHN0YXR1c0NvZGUgPSByZXNwb25zZS5zdGF0dXNDb2RlO1xyXG4gICAgICAgICAgICAgICAgaWYoc3RhdHVzQ29kZSAhPSAyMDApe1xyXG4gICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgfWVsc2V7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIG9iaiA9IHJlc3BvbnNlLmNvbnRlbnQudG9KU09OKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coSlNPTi5zdHJpbmdpZnkob2JqKSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcInN0YXR1cyBjb2RlID0+IFwiICwgc3RhdHVzQ29kZSk7XHJcbiAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgfSwgZnVuY3Rpb24gKGUpIHsvLy8vIEFyZ3VtZW50IChlKSBpcyBFcnJvciFcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiZXJyb3IgaXMgXCIgLCBlKTsgIFxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgXHJcbiAgICB9XHJcbiAgICBwcml2YXRlIGJ0bkNoZWNrKCl7XHJcbiAgICAgICAgbGV0IHNlbGYgPSB0aGlzO1xyXG4gICAgICAgIHZhciByZXN1bHQ7XHJcbiAgICAgICAgaHR0cC5yZXF1ZXN0KHsgXHJcbiAgICAgICAgICAgICAgICB1cmw6IHNlbGYuc3RyVVJMICtcIi91c2Vycy8xXCIgLCBcclxuICAgICAgICAgICAgICAgIG1ldGhvZDogXCJHRVRcIiBcclxuICAgICAgICB9KS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkge1xyXG4gICAgICAgICAgICB2YXIgb2JqID0gcmVzcG9uc2UuY29udGVudC50b0pTT04oKTtcclxuICAgICAgICAgICAgdmFyIHN0YXR1c0NvZGUgPSByZXNwb25zZS5zdGF0dXNDb2RlO1xyXG5cclxuICAgICAgICAgICAgY29uc29sZS5sb2coXCJzdGF0dXMgY29kZSA9PiBcIiAsIHN0YXR1c0NvZGUpO1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhKU09OLnN0cmluZ2lmeShvYmopKTtcclxuXHJcbiAgICAgICAgfSwgZnVuY3Rpb24gKGUpIHsvLy8vIEFyZ3VtZW50IChlKSBpcyBFcnJvciFcclxuXHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiZXJyb3IgaXMgXCIgLCBlKTsgIFxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIGh0dHBMb2dpbigpe1xyXG4gICAgICAgIGNvbnNvbGUubG9nKFwib24gPT4gaHR0cCBMb2dpblwiKTtcclxuICAgICAgICBsZXQgc2VsZiA9IHRoaXM7XHJcblxyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgY2hlY2tFbXB0eSgpe1xyXG4gICAgICAgIGxldCBzZWxmID0gdGhpcztcclxuICAgICAgICBjb25zb2xlLmxvZyhcInVzZXJuYW1lID09PT4gXCIgLCBzZWxmLnVzZXJuYW1lICk7XHJcbiAgICAgICAgY29uc29sZS5sb2coXCJwYXNzd29yZCA9PT0+IFwiICwgc2VsZi5wYXNzd29yZCk7XHJcblxyXG4gICAgICAgIGlmKHNlbGYudXNlcm5hbWUudHJpbSgpID09IFwiXCIgfHwgc2VsZi5wYXNzd29yZC50cmltKCkgPT1cIlwiKXtcclxuICAgICAgICAgXHJcbiAgICAgICAgICAgIHZhciB0b2FzdCA9IFRvYXN0Lm1ha2VUZXh0KFwi4Lih4Li14LiK4LmI4Lit4LiH4Lin4LmI4Liy4LiH4LiZ4Liw4LmE4Lit4LmJ4LmC4LiH4LmIXCIpO1xyXG4gICAgICAgICAgICB0b2FzdC5zaG93KCk7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9ZWxzZXtcclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIFxyXG4gICAgfVxyXG5cclxuXHJcblxyXG59XHJcbiJdfQ==