"use strict";
var core_1 = require("@angular/core");
var router_1 = require("@angular/router");
var http = require("http");
var Toast = require("nativescript-toast");
var LoginComponent = (function () {
    function LoginComponent(router) {
        this.router = router;
        this.username = "";
        this.password = "";
        this.strURL = "http://192.9.9.112:30";
        var self = this;
    }
    LoginComponent.prototype.btnLogin = function () {
        var self = this;
        var checkEmpty = self.checkEmpty();
        console.log("empty word  ==>", checkEmpty);
        if (checkEmpty == true) {
            http.request({
                url: self.strURL + "/login/" + self.username + "/" + self.password,
                method: "GET"
            }).then(function (response) {
                var statusCode = response.statusCode;
                console.log("status code => ", statusCode);
                if (statusCode != 200) {
                    var toast = Toast.makeText("ไม่มี user และ password นี้ในระบบ");
                    toast.show();
                }
                else {
                    var obj = response.content.toJSON();
                    console.log(JSON.stringify(obj));
                    self.router.navigate(["./main"]);
                } //end else statusCode
            }, function (e) {
                console.log("error is ", e);
            });
        } // End if checkEmpty
    };
    LoginComponent.prototype.myResultReturn = function () {
    };
    LoginComponent.prototype.btnCheck = function () {
        var self = this;
        var result;
        http.request({
            url: self.strURL + "/users/1",
            method: "GET"
        }).then(function (response) {
            var obj = response.content.toJSON();
            var statusCode = response.statusCode;
            console.log("status code => ", statusCode);
            console.log(JSON.stringify(obj));
        }, function (e) {
            console.log("error is ", e);
        });
    };
    LoginComponent.prototype.httpLogin = function () {
        console.log("on => http Login");
        var self = this;
    };
    LoginComponent.prototype.checkEmpty = function () {
        var self = this;
        console.log("username ===> ", self.username);
        console.log("password ===> ", self.password);
        if (self.username.trim() == "" || self.password.trim() == "") {
            var toast = Toast.makeText("มีช่องว่างนะไอ้โง่");
            toast.show();
            return false;
        }
        else {
            return true;
        }
    };
    return LoginComponent;
}());
LoginComponent = __decorate([
    core_1.Component({
        selector: "Login",
        templateUrl: "views/setting/login/login-component.html",
    }),
    __metadata("design:paramtypes", [router_1.Router])
], LoginComponent);
exports.LoginComponent = LoginComponent;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9naW4tY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsibG9naW4tY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxzQ0FBMEM7QUFFMUMsMENBQW1FO0FBSW5FLElBQUksSUFBSSxHQUFHLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQztBQUMzQixJQUFJLEtBQUssR0FBRyxPQUFPLENBQUMsb0JBQW9CLENBQUMsQ0FBQztBQU0xQyxJQUFhLGNBQWM7SUFRdkIsd0JBQW9CLE1BQWM7UUFBZCxXQUFNLEdBQU4sTUFBTSxDQUFRO1FBTjFCLGFBQVEsR0FBWSxFQUFFLENBQUU7UUFDeEIsYUFBUSxHQUFZLEVBQUUsQ0FBRTtRQUd4QixXQUFNLEdBQVksdUJBQXVCLENBQUM7UUFHOUMsSUFBSSxJQUFJLEdBQUcsSUFBSSxDQUFDO0lBRXBCLENBQUM7SUFFTyxpQ0FBUSxHQUFoQjtRQUNJLElBQUksSUFBSSxHQUFHLElBQUksQ0FBQztRQUNoQixJQUFJLFVBQVUsR0FBRyxJQUFJLENBQUMsVUFBVSxFQUFFLENBQUM7UUFDbkMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxpQkFBaUIsRUFBRyxVQUFVLENBQUMsQ0FBQztRQUM1QyxFQUFFLENBQUEsQ0FBRSxVQUFVLElBQUksSUFBSSxDQUFDLENBQUEsQ0FBQztZQUVwQixJQUFJLENBQUMsT0FBTyxDQUFDO2dCQUNULEdBQUcsRUFBRSxJQUFJLENBQUMsTUFBTSxHQUFFLFNBQVMsR0FBRSxJQUFJLENBQUMsUUFBUSxHQUFHLEdBQUcsR0FBQyxJQUFJLENBQUMsUUFBUTtnQkFDOUQsTUFBTSxFQUFFLEtBQUs7YUFDaEIsQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFVLFFBQVE7Z0JBRXRCLElBQUksVUFBVSxHQUFHLFFBQVEsQ0FBQyxVQUFVLENBQUM7Z0JBQ3JDLE9BQU8sQ0FBQyxHQUFHLENBQUMsaUJBQWlCLEVBQUcsVUFBVSxDQUFDLENBQUM7Z0JBQzVDLEVBQUUsQ0FBQSxD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ImltcG9ydCB7IENvbXBvbmVudCB9IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XHJcbmltcG9ydCB7IFVzZXIgfSBmcm9tIFwiLi4vLi4vLi4vc2hhcmVkL215RnVuY3Rpb24xXCI7XHJcbmltcG9ydCB7IFJvdXRlciwgTmF2aWdhdGlvbkV4dHJhcyAsIFJvdXRlIH0gZnJvbSBcIkBhbmd1bGFyL3JvdXRlclwiOyBcclxuXHJcblxyXG5cclxudmFyIGh0dHAgPSByZXF1aXJlKFwiaHR0cFwiKTtcclxudmFyIFRvYXN0ID0gcmVxdWlyZShcIm5hdGl2ZXNjcmlwdC10b2FzdFwiKTtcclxuXHJcbkBDb21wb25lbnQoe1xyXG4gICAgc2VsZWN0b3I6IFwiTG9naW5cIixcclxuICAgIHRlbXBsYXRlVXJsOiBcInZpZXdzL3NldHRpbmcvbG9naW4vbG9naW4tY29tcG9uZW50Lmh0bWxcIixcclxufSlcclxuZXhwb3J0IGNsYXNzIExvZ2luQ29tcG9uZW50IHtcclxuXHJcbiAgICBwcml2YXRlIHVzZXJuYW1lIDogc3RyaW5nID0gXCJcIiA7XHJcbiAgICBwcml2YXRlIHBhc3N3b3JkIDogc3RyaW5nID0gXCJcIiA7XHJcbiAgXHJcblxyXG4gICAgcHJpdmF0ZSBzdHJVUkwgOiBzdHJpbmcgPSBcImh0dHA6Ly8xOTIuOS45LjExMjozMFwiO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgcm91dGVyOiBSb3V0ZXIgKXtcclxuICAgICAgICBsZXQgc2VsZiA9IHRoaXM7XHJcbiAgICAgICAgXHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBidG5Mb2dpbigpe1xyXG4gICAgICAgIGxldCBzZWxmID0gdGhpcztcclxuICAgICAgICB2YXIgY2hlY2tFbXB0eSA9IHNlbGYuY2hlY2tFbXB0eSgpO1xyXG4gICAgICAgIGNvbnNvbGUubG9nKFwiZW1wdHkgd29yZCAgPT0+XCIgLCBjaGVja0VtcHR5KTtcclxuICAgICAgICBpZiggY2hlY2tFbXB0eSA9PSB0cnVlKXtcclxuXHJcbiAgICAgICAgICAgIGh0dHAucmVxdWVzdCh7IFxyXG4gICAgICAgICAgICAgICAgdXJsOiBzZWxmLnN0clVSTCArXCIvbG9naW4vXCIrIHNlbGYudXNlcm5hbWUgKyBcIi9cIitzZWxmLnBhc3N3b3JkLCBcclxuICAgICAgICAgICAgICAgIG1ldGhvZDogXCJHRVRcIiBcclxuICAgICAgICAgICAgfSkudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHtcclxuXHJcbiAgICAgICAgICAgICAgICB2YXIgc3RhdHVzQ29kZSA9IHJlc3BvbnNlLnN0YXR1c0NvZGU7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcInN0YXR1cyBjb2RlID0+IFwiICwgc3RhdHVzQ29kZSk7XHJcbiAgICAgICAgICAgICAgICBpZihzdGF0dXNDb2RlICE9IDIwMCl7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRvYXN0ID0gVG9hc3QubWFrZVRleHQoXCLguYTguKHguYjguKHguLUgdXNlciDguYHguKXguLAgcGFzc3dvcmQg4LiZ4Li14LmJ4LmD4LiZ4Lij4Liw4Lia4LiaXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRvYXN0LnNob3coKTtcclxuXHJcbiAgICAgICAgICAgICAgICB9ZWxzZXtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgb2JqID0gcmVzcG9uc2UuY29udGVudC50b0pTT04oKTtcclxuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhKU09OLnN0cmluZ2lmeShvYmopKTtcclxuICAgICAgICAgICAgICAgICAgICBzZWxmLnJvdXRlci5uYXZpZ2F0ZShbXCIuL21haW5cIl0pO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vc2VsZi5yb3V0ZXJFeHRlbnNpb25zLm5hdmlnYXRlKFtcInVzZXIvbGlzdFwiXSwgeyBjbGVhckhpc3Rvcnk6IHRydWUgfSk7XHJcbiAgICAgICAgICAgICAgICB9Ly9lbmQgZWxzZSBzdGF0dXNDb2RlXHJcbiAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgfSwgZnVuY3Rpb24gKGUpIHsvLy8vIEFyZ3VtZW50IChlKSBpcyBFcnJvciFcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiZXJyb3IgaXMgXCIgLCBlKTsgIFxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9Ly8gRW5kIGlmIGNoZWNrRW1wdHlcclxuICAgICAgICBcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIG15UmVzdWx0UmV0dXJuKCl7XHJcblxyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgYnRuQ2hlY2soKXtcclxuICAgICAgICBsZXQgc2VsZiA9IHRoaXM7XHJcbiAgICAgICAgdmFyIHJlc3VsdDtcclxuICAgICAgICBodHRwLnJlcXVlc3QoeyBcclxuICAgICAgICAgICAgICAgIHVybDogc2VsZi5zdHJVUkwgK1wiL3VzZXJzLzFcIiAsIFxyXG4gICAgICAgICAgICAgICAgbWV0aG9kOiBcIkdFVFwiIFxyXG4gICAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgIHZhciBvYmogPSByZXNwb25zZS5jb250ZW50LnRvSlNPTigpO1xyXG4gICAgICAgICAgICB2YXIgc3RhdHVzQ29kZSA9IHJlc3BvbnNlLnN0YXR1c0NvZGU7XHJcblxyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcInN0YXR1cyBjb2RlID0+IFwiICwgc3RhdHVzQ29kZSk7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKEpTT04uc3RyaW5naWZ5KG9iaikpO1xyXG5cclxuICAgICAgICB9LCBmdW5jdGlvbiAoZSkgey8vLy8gQXJndW1lbnQgKGUpIGlzIEVycm9yIVxyXG5cclxuICAgICAgICAgICAgY29uc29sZS5sb2coXCJlcnJvciBpcyBcIiAsIGUpOyAgXHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgaHR0cExvZ2luKCl7XHJcbiAgICAgICAgY29uc29sZS5sb2coXCJvbiA9PiBodHRwIExvZ2luXCIpO1xyXG4gICAgICAgIGxldCBzZWxmID0gdGhpcztcclxuXHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBjaGVja0VtcHR5KCl7XHJcbiAgICAgICAgbGV0IHNlbGYgPSB0aGlzO1xyXG4gICAgICAgIGNvbnNvbGUubG9nKFwidXNlcm5hbWUgPT09PiBcIiAsIHNlbGYudXNlcm5hbWUgKTtcclxuICAgICAgICBjb25zb2xlLmxvZyhcInBhc3N3b3JkID09PT4gXCIgLCBzZWxmLnBhc3N3b3JkKTtcclxuXHJcbiAgICAgICAgaWYoc2VsZi51c2VybmFtZS50cmltKCkgPT0gXCJcIiB8fCBzZWxmLnBhc3N3b3JkLnRyaW0oKSA9PVwiXCIpe1xyXG4gICAgICAgICBcclxuICAgICAgICAgICAgdmFyIHRvYXN0ID0gVG9hc3QubWFrZVRleHQoXCLguKHguLXguIrguYjguK3guIfguKfguYjguLLguIfguJnguLDguYTguK3guYnguYLguIfguYhcIik7XHJcbiAgICAgICAgICAgIHRvYXN0LnNob3coKTtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1lbHNle1xyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgXHJcbiAgICB9XHJcblxyXG5cclxuXHJcbn1cclxuIl19