"use strict";
var core_1 = require("@angular/core");
var router_1 = require("@angular/router");
var items_word_1 = require("../models/items/items_word");
var myDB_1 = require("../models/myDb/myDB");
var application = require("application");
var application_1 = require("application");
var platform_1 = require("platform");
var Sqlite = require("nativescript-sqlite");
var fs = require("file-system");
var ViewComponent = (function () {
    function ViewComponent(router) {
        this.router = router;
        this.db_word = []; //เก็บไฟล์ ในรูปของ object ในโฟลเดอร์ file/database 
        this.word_rand = ""; //word eng Random show on layout
        this.mean_rand = ""; //word thai Random show on layout
        this.type_rand = ""; //word type Random show on layout
        this.word_list2 = []; //list show on layout
        this.word_search = ""; //ngModule input word search-
        this.word_list = []; //list sql temp 
        this.word_sql = ""; //output on sql
        this.db_file_check = 0;
        this.viewCheck = 0; // เช็คว่า เป็นส่วนไหน 0-random , 1-Search , 2-Facvortie , 3-History
        var self = this;
        //Code ตอนที่ไม่มีอะไรเลย เริ่มสร้างจาก 1
        (new Sqlite("dicts.db")).then(function (db) {
            self.database = db;
            self.createHistory();
            self.createMyUser();
            self.createFavorite();
        }, function (error) {
            console.log("OPEN DB ERROR", error);
        });
        self.myDb();
        if (self.db_file_check != 0) {
            (new Sqlite(self.my_db_path)).then(function (db) {
                self.my_db = db;
                console.log("Open database Success");
            }, function (error) {
                console.log("Open DB ERROR", error);
            });
        }
    }
    //  function use for listview
    ViewComponent.prototype.ngOnInit = function () {
        var self = this;
        console.log('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa');
        //self.getItem();
        //self.pushList(self.word_list);
        if (!platform_1.isAndroid) {
            return;
        }
        application.android.on(application_1.AndroidApplication.activityBackPressedEvent, function (data) {
            console.log('AndroidApplication.activityBackPressedEvent');
            //this.fetch2();
        });
    };
    ViewComponent.prototype.myDb = function () {
        var self = this;
        console.log("in => self.mydb");
        var doc = fs.knownFolders.documents();
        var my_path = doc.getFolder("database");
        console.log(JSON.stringify(my_path));
        var temp = my_path.getEntitiesSync();
        console.log("temp => ", JSON.stringify(temp));
        for (var i in temp) {
            //console.log("i" , JSON.stringify(temp[i]));
            var model_db = new myDB_1.MyDatabase();
            console.log("i", temp[i].name);
            console.log("i", temp[i].extension);
            if (temp[i].extension == ".db") {
                //let temp2 = [temp[i].name , temp[i].path];
                model_db.name = temp[i].name;
                model_db.path = temp[i].path;
                //let temp2 = [1][1];;
                self.db_word.push(model_db);
            }
        }
        if (self.db_word.length == 0) {
            console.log("Not DATABASE");
            console.log(self.db_word.length);
        }
        else if (self.db_word.length == 1) {
            self.db_file_check = 1;
            console.log(self.db_word.length);
            self.my_db_path = self.db_word[0].path;
            console.log("my_db => " + self.my_db_path);
        }
        else if (self.db_word.length > 1) {
            self.db_file_check = 1;
            console.log(self.db_word.length);
            for (var i = 0; i < self.db_word.length; i++) {
                if (self.db_word[i].name == "EngToTha.db") {
                    self.my_db_path = self.db_word[i].path;
                }
                if (i = self.db_word.length - 1) {
                    if (self.my_db_path == "") {
                        self.my_db_path = self.db_word[0].path;
                    }
                }
            }
        }
    };
    ViewComponent.prototype.ngAfterViewInit = function () {
        console.log("ng==========> AfterViewInit");
    };
    ViewComponent.prototype.createHistory = function () {
        var self = this;
        self.database.execSQL("CREATE TABLE IF NOT EXISTS HISTORY (id INTEGER PRIMARY KEY AUTOINCREMENT,word_id INTEGER ,sTime DATE)").then(function (id) {
            self.database = self.database;
            console.log("CREATE HISTORY Success");
        }, function (error) {
            console.log("CREATE TABLE HISTORY ERROR", error);
        });
    };
    ViewComponent.prototype.createFavorite = function () {
        var self = this;
        self.database.execSQL("CREATE TABLE IF NOT EXISTS FAVORITE (id INTEGER PRIMARY KEY AUTOINCREMENT,word_id INTEGER )").then(function (id) {
            self.database = self.database;
            console.log("CREATE FAVORITE Success");
        }, function (error) {
            console.log("CREATE TABLE FAVORITE ERROR", error);
        });
    };
    ViewComponent.prototype.createMyUser = function () {
        var self = this;
        self.database.execSQL("CREATE TABLE IF NOT EXISTS USERS (id INTEGER PRIMARY KEY AUTOINCREMENT,username TEXT , name TEXT , status INTEGER , login INTEGER DEFAULT 0 )").then(function (id) {
            self.database = self.database;
            console.log("CREATE USERS Success");
        }, function (error) {
            console.log("CREATE TABLE USERS ERROR", error);
        });
    };
    ViewComponent.prototype.fetch2 = function () {
        var _this = this;
        var self = this;
        self.viewCheck = 1;
        console.log("Go to ===> fetch 2");
        this.my_db.all("SELECT dict_no , dict_search , dict_meaning FROM words WHERE dict_no > 400 LIMit 10").then(function (rows) {
            //console.log(rows);
            _this.word_list = rows;
            for (var i = 0; i < rows.length; i++) {
            }
            self.refeshList();
            self.pushList(rows);
        }, function (error) {
            console.log("SELECT ERROR ", error);
        });
    };
    ViewComponent.prototype.btnInsert = function () {
        console.log("click btnInsert");
        this.router.navigate(["insert"]), {
            transition: {
                name: "flip",
                dutation: 2000,
                curve: "linear"
            }
        };
        this.btnSelectRandom();
    };
    ViewComponent.prototype.btnSelect = function () {
        var self = this;
        var search = self.word_search;
        if (search == "") {
            alert("มีช่องว่างนะไอ้โง่ .....");
        }
        else {
            console.log("Check ==> ", "Select ===> " + search);
            var temp = "%" + search + "%";
            self.my_db.all("SELECT dict_no , dict_search , dict_meaning FROM words WHERE dict_search LIKE (?)", [temp]).then(function (rows) {
                if (rows == "") {
                    console.log("not word ===>  " + rows + "is " + search);
                    alert("ไม่มีคำว่า " + search + " ในฐานข้อมูล");
                }
                self.word_list = rows;
                for (var row in rows) {
                    console.log("Result ==v");
                    console.log("result all ==> ", rows[row]); //result all
                    console.log("eng_word ==> ", rows[row][1]); // result eng
                    console.log("thai_word ==> ", rows[row][2]);
                }
            }, function (error) {
                console.log("SELECT ERROR ", error);
            });
        }
    };
    ViewComponent.prototype.btnDelete = function () {
        console.log("Check == > ", " Delete");
        this.router.navigate(["delete"]), {};
        this.btnSelectRandom();
    };
    ViewComponent.prototype.getItem = function () {
        console.log("GET ITEM ================> ");
        var self = this;
        var temp_list;
        temp_list = self.word_list;
        for (var row in temp_list) {
            var model_word = new items_word_1.WordItem();
            model_word.id = temp_list[row][0];
            model_word.dict_search = temp_list[row][1];
            model_word.dict_meaning = temp_list[row][2];
            self.word_list2.push(model_word);
        }
    };
    ViewComponent.prototype.getItemSelect = function () {
        var self = this;
        self.viewCheck = 1;
        if (self.db_file_check != 0) {
            var search = self.word_search;
            if (search == "") {
                //self.btnSelectRandom();
                alert("มีช่องว่างนะไอ้โง่ .....");
            }
            else {
                console.log("Check ==> ", "Select ===> " + search);
                var temp = search + "%";
                self.my_db.all("SELECT dict_no , dict_search , dict_meaning FROM words WHERE dict_search LIKE (?)", [temp]).then(function (rows) {
                    if (rows == "") {
                        console.log("not word ===>  " + rows + "is " + search);
                        alert("ไม่มีคำว่า " + search + " ในฐานข้อมูล");
                    }
                    else {
                        self.word_search = "";
                    }
                    self.word_sql = rows;
                    self.refeshList();
                    self.pushList(rows);
                    //self.refeshList();
                    //self.pushList(rows);
                }, function (error) {
                    console.log("SELECT ERROR ", error);
                });
            }
        }
        else {
            alert("NO Databse .....");
        }
    };
    // FAVORiTE AND HISTORY NO USE
    ViewComponent.prototype.getItemFavorite = function () {
        var self = this;
        self.viewCheck = 1;
        var strSQL = "SELECT word_id FROM FAVORITE";
        self.database.all(strSQL).then(function (result) {
            self.word_sql = result;
            self.refeshList();
            self.pushList(self.word_sql);
        }, function (error) {
            console.log("SELECT Favoirite Error => ", error);
        });
    };
    ViewComponent.prototype.getItemHistory = function () {
        var self = this;
        self.viewCheck = 1;
        var strSQL = "SELECT h.word_id , d.engWorld , d.thaiWorld , d.type , d.favorite FROM HISTORY h join dict d on h.word_id = d.id ORDER BY h.id DESC";
        self.database.all(strSQL).then(function (result) {
            self.word_sql = result;
            self.refeshList();
            self.pushList(self.word_sql);
        }, function (error) {
            console.log("SELECT History Error => ", error);
        });
    };
    ViewComponent.prototype.btnSelectRandom = function () {
        var self = this;
        if (self.db_file_check != 0) {
            self.viewCheck = 0;
            self.refeshList();
            self.my_db.all("SELECT dict_no , dict_search , dict_meaning FROM words WHERE dict_no > 400 ORDER BY RANDOM() LIMIT 1").then(function (rows) {
                console.log(rows);
                console.log("eng_word ==> ", rows[0][1]); // result word
                self.word_rand = rows[0][1];
                console.log("thai_word ==> ", rows[0][2]); //result mean word
                self.mean_rand = rows[0][2];
            }, function (error) {
                console.log("SELECT ERROR ", error);
            });
        }
        else {
            alert("กรุณาโหลด Dicttionnary ในหน้า setting");
        }
    };
    ViewComponent.prototype.refeshList = function () {
        var self = this;
        var delPop = self.word_list2.length;
        console.log("delpop length ==>", delPop);
        if (delPop > 0) {
            for (var i = 0; i < delPop; i++) {
                self.word_list2.pop();
            }
        }
    };
    ViewComponent.prototype.pushList = function (args) {
        var self = this;
        var rows = args;
        for (var row in rows) {
            var model_word = new items_word_1.WordItem();
            model_word.id = rows[row][0];
            model_word.dict_search = rows[row][1];
            model_word.dict_meaning = rows[row][2];
            self.word_list2.push(model_word);
        }
    };
    ViewComponent.prototype.onItemTap = function (args) {
        var self = this;
        var word = self.word_list2[args.index];
        var navigationExtras = {
            queryParams: {
                "words": JSON.stringify(word)
            }
        };
        this.router.navigate(["list-detail"], navigationExtras);
    };
    ViewComponent.prototype.onSetting = function () {
        console.log("Check == > ", " onSetting");
        this.router.navigate(["setting"]), {};
    };
    return ViewComponent;
}());
ViewComponent = __decorate([
    core_1.Component({
        selector: "ns-app",
        templateUrl: "views/main.html",
    }),
    __metadata("design:paramtypes", [router_1.Router])
], ViewComponent);
exports.ViewComponent = ViewComponent;
//# sourceMappingURL=data:application/json;base64,