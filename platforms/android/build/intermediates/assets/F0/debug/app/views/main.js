"use strict";
var core_1 = require("@angular/core");
var router_1 = require("@angular/router");
var Sqlite = require("nativescript-sqlite");
var ViewComponent = (function () {
    function ViewComponent(router) {
        var _this = this;
        this.router = router;
        this.word_search = "";
        //Code ตอนที่ไม่มีอะไรเลย เริ่มสร้างจาก 1
        (new Sqlite("dicts.db")).then(function (db) {
            db.execSQL("CREATE TABLE IF NOT EXISTS dict (id INTEGER PRIMARY KEY AUTOINCREMENT, engWorld TEXT, thaiWorld TEXT ,type TEXT DEFAULT 'Noun' , sTime DATE DEFAULT Null )").then(function (id) {
                _this.database = db;
                console.log("CREAT TABLE ===> Success ");
                //this.insert();
                _this.fetch();
                db.execSQL("CREATE TABLE IF NOT EXISTS FAVORITE (id INTEGER PRIMARY KEY AUTOINCREMENT,word_id INTEGER)").then(function (id) {
                    _this.database = db;
                    console.log("CREATE FAVORITE Success");
                    _this.createHistory();
                }, function (error) {
                    console.log("CREATE TABLE FAVORITE ERROR", error);
                });
            }, function (error) {
                console.log("CREATE TABLE ERROR", error);
            });
        }, function (error) {
            console.log("OPEN DB ERROR", error);
        });
        //เรียกใช้ database ที่มีอยู่แล้วชื่อ dicts.db
        /*new Sqlite("dicts.db").then(db =>{
            this.database = db;
            console.log("Open database Success")
            
        },error =>{
            console.log("Open DB ERROR" , error);
        })
        */
    }
    ViewComponent.prototype.createHistory = function () {
        var _this = this;
        this.database.execSQL("CREATE TABLE IF NOT EXISTS HISTORY (id INTEGER PRIMARY KEY AUTOINCREMENT,word_id INTEGER ,sTime DATE)").then(function (id) {
            _this.database = _this.database;
            console.log("CREATE HISTORY Success");
        }, function (error) {
            console.log("CREATE TABLE HISTORY ERROR", error);
        });
    };
    ViewComponent.prototype.insert = function () {
        var _this = this;
        this.database.execSQL("INSERT INTO dict (engWorld, thaiWorld) VALUES (?,?)", ["red", "แดง"]).then(function (all_word) {
            console.log("INSERT RESULT => ", all_word);
            console.log(_this.eng_word + " " + _this.eng_word);
            _this.fetch();
        }, function (error) {
            console.log("INSERT ERROR => ", error);
        });
    };
    ViewComponent.prototype.fetch = function () {
        console.log("Go to ===> fetch");
        this.database.all("SELECT * FROM dict").then(function (rows) {
            console.log(rows);
            /*for(var row in rows){
                console.log("Result ==v");
            
                console.log("result all ==> " , rows[row]);//result all
                console.log("eng_word ==> " , rows[row][1]); // result eng
                console.log("thai_word ==> " , rows[row][2]); //result thai
                console.log("type word ==> " , rows[row][3]); //result thai
            }*/
            for (var i = 0; i < rows.length; i++) {
                console.log("result ==>", rows[i]);
            }
        }, function (error) {
            console.log("SELECT ERROR ", error);
        });
    };
    ViewComponent.prototype.btnInsert = function () {
        console.log("click btnInsert");
        this.router.navigate(["insert"]), {
            transition: {
                name: "flip",
                dutation: 2000,
                curve: "linear"
            }
        };
    };
    ViewComponent.prototype.btnSelect = function () {
        var _this = this;
        var search = this.word_search;
        if (search == "") {
            alert("มีช่องว่างนะไอ้โง่ .....");
        }
        else {
            console.log("Check ==> ", "Select ===> " + search);
            var temp = "%" + search + "%";
            this.database.all("SELECT * FROM dict WHERE engWorld LIKE (?) or thaiWorld LIKE (?)", [temp, temp]).then(function (rows) {
                if (rows == "") {
                    console.log("not word ===>  " + rows + "is " + search);
                    alert("ไม่มีคำว่า " + search + " ในฐานข้อมูล");
                }
                _this.word_list = rows;
                for (var row in rows) {
                    console.log("Result ==v");
                    /*for(var i=0 ; i <= rows.length ; i++ ){
                     console.log("result ==>" , rows[row][i]);
                    }*/
                    console.log("result all ==> ", rows[row]); //result all
                    console.log("eng_word ==> ", rows[row][1]); // result eng
                    console.log("thai_word ==> ", rows[row][2]); //result thai
                }
            }, function (error) {
                console.log("SELECT ERROR ", error);
            });
        }
    };
    ViewComponent.prototype.btnDelete = function () {
        console.log("Check == > ", " Delete");
        this.router.navigate(["delete"]), {
            transition: {
                name: "flip",
                dutation: 2000,
                curve: "linear"
            }
        };
    };
    //  function use for listview
    /*ngOnInit(): void {
        this.items = this.word_list;
    }*/
    ViewComponent.prototype.btnSelectRandom = function () {
        console.log("Select Random");
        this.database.all("SELECT * FROM dict ORDER BY RANDOM() LIMIT 1").then(function (rows) {
            console.log(rows);
            /*for(var row in rows){
                console.log("Result ==v");
            
                console.log("result all ==> " , rows[row]);//result all
                console.log("eng_word ==> " , rows[row][1]); // result eng
                console.log("thai_word ==> " , rows[row][2]); //result thai
                console.log("type word ==> " , rows[row][3]); //result thai
            }*/
            for (var i = 0; i < rows.length; i++) {
                console.log("result for row ==>", rows[i]);
            }
        }, function (error) {
            console.log("SELECT ERROR ", error);
        });
    };
    return ViewComponent;
}());
ViewComponent = __decorate([
    core_1.Component({
        selector: "ns-app",
        templateUrl: "views/main.html",
    }),
    __metadata("design:paramtypes", [router_1.Router])
], ViewComponent);
exports.ViewComponent = ViewComponent;
//# sourceMappingURL=data:application/json;base64,