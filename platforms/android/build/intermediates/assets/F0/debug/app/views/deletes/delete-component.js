"use strict";
var core_1 = require("@angular/core");
var Sqlite = require("nativescript-sqlite");
var Toast = require("nativescript-toast");
var DeleteComponent = (function () {
    function DeleteComponent() {
        var _this = this;
        this.eng_word = "";
        new Sqlite("dicts.db").then(function (db) {
            _this.database = db;
            console.log("Open database Success");
        }, function (error) {
            console.log("Open DB ERROR", error);
        });
    }
    DeleteComponent.prototype.btnDelete = function () {
        //console.log("check click == > Deltes eng_word ==> " + this.eng_word);
        if (this.eng_word == "") {
            alert("มึงมีช่องว่างนะไอ้โง่");
        }
        else {
            this.processDelete();
        }
    };
    DeleteComponent.prototype.processDelete = function () {
        var _this = this;
        //console.log(this.eng_word + " kuy");
        this.database.execSQL("DELETE FROM dict WHERE engWorld =(?)", [this.eng_word]).then(function (id) {
            console.log("Delte RESULT => ", id);
            if (id == 0) {
                alert("ไม่มีคำศัพท์ " + _this.eng_word + "อยู่ในระบบ");
            }
            else {
                alert("คุณได้ลบคำศัพท์ " + _this.eng_word + " เรียบร้อยแล้ว");
            }
        }, function (error) {
            console.log("Delte ERROR => ", error);
        });
    };
    DeleteComponent.prototype.fetch = function () {
        console.log("Go to ===> fetch");
        this.database.all("SELECT * FROM dict").then(function (rows) {
            for (var row in rows) {
                console.log("Result ==v");
                /*for(var i=0 ; i <= rows.length ; i++ ){
                    console.log("result ==>" , rows[row][i]);
                }*/
                console.log("result all ==> ", rows[row]); //result all
                console.log("eng_word ==> ", rows[row][1]); // result eng
                console.log("thai_word ==> ", rows[row][2]); //result thai
            }
        }, function (error) {
            console.log("SELECT ERROR ", error);
        });
    };
    return DeleteComponent;
}());
DeleteComponent = __decorate([
    core_1.Component({
        selector: "Delete",
        templateUrl: "views/deletes/delete-component.html",
    }),
    __metadata("design:paramtypes", [])
], DeleteComponent);
exports.DeleteComponent = DeleteComponent;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVsZXRlLWNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImRlbGV0ZS1jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLHNDQUEwQztBQUsxQyxJQUFJLE1BQU0sR0FBRyxPQUFPLENBQUMscUJBQXFCLENBQUMsQ0FBQztBQUM1QyxJQUFJLEtBQUssR0FBRyxPQUFPLENBQUMsb0JBQW9CLENBQUMsQ0FBQztBQU8xQyxJQUFhLGVBQWU7SUFReEI7UUFBQSxpQkFTQztRQWJELGFBQVEsR0FBQyxFQUFFLENBQUM7UUFLUixJQUFJLE1BQU0sQ0FBQyxVQUFVLENBQUMsQ0FBQyxJQUFJLENBQUMsVUFBQSxFQUFFO1lBQzFCLEtBQUksQ0FBQyxRQUFRLEdBQUcsRUFBRSxDQUFDO1lBQ25CLE9BQU8sQ0FBQyxHQUFHLENBQUMsdUJBQXVCLENBQUMsQ0FBQztRQUV6QyxDQUFDLEVBQUMsVUFBQSxLQUFLO1lBQ0gsT0FBTyxDQUFDLEdBQUcsQ0FBQyxlQUFlLEVBQUcsS0FBSyxDQUFDLENBQUM7UUFDekMsQ0FBQyxDQUFDLENBQUE7SUFFTixDQUFDO0lBRUQsbUNBQVMsR0FBVDtRQUNJLHVFQUF1RTtRQUN2RSxFQUFFLENBQUEsQ0FBRSxJQUFJLENBQUMsUUFBUSxJQUFHLEVBQUUsQ0FBQyxDQUFBLENBQUM7WUFDcEIsS0FBSyxDQUFDLHVCQUF1QixDQUFDLENBQUM7UUFDbkMsQ0FBQztRQUFBLElBQUksQ0FBQSxDQUFDO1lBQ0YsSUFBSSxDQUFDLGFBQWEsRUFBRSxDQUFDO1FBQ3pCLENBQUM7SUFFTCxDQUFDO0lBRUQsdUNBQWEsR0FBYjtRQUFBLGlCQWVDO1FBZEcsc0NBQXNDO1FBQ3RDLElBQUksQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLHNDQUFzQyxFQUFHLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFVBQUEsRUFBRTtZQUMvRSxPQUFPLENBQUMsR0FBRyxDQUFDLGtCQUFrQixFQUFHLEVBQUUsQ0FBRyxDQUFDO1lBQ3ZDLEVBQUUsQ0FBQSxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQSxDQUFDO2dCQUNSLEtBQUssQ0FBQyxlQUFlLEdBQUcsS0FBSSxDQUFDLFFBQVEsR0FBRyxZQUFZLENBQUMsQ0FBQTtZQUN6RCxDQUFDO1lBQUEsSUFBSSxDQUFBLENBQUM7Z0JBQ0YsS0FBSyxDQUFDLGtCQUFrQixHQUFHLEtBQUksQ0FBQyxRQUFRLEdBQUcsZ0JBQWdCLENBQUMsQ0FBQztZQUVqRSxDQUFDO1FBQ0QsQ0FBQyxFQUFFLFVBQUEsS0FBSztZQUNKLE9BQU8sQ0FBQyxHQUFHLENBQUMsaUJBQWlCLEVBQUcsS0FBSyxDQUFDLENBQUM7UUFDM0MsQ0FBQyxDQUNKLENBQUM7SUFFVixDQUFDO0lBR00sK0JBQUssR0FBWjtRQUNJLE9BQU8sQ0FBQyxHQUFHLENBQUMsa0JBQWtCLENBQUMsQ0FBQztRQUVoQyxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFBLElBQUk7WUFDN0MsR0FBRyxDQUFBLENBQUMsSUFBSSxHQUFHLElBQUksSUFBSSxDQUFDLENBQUEsQ0FBQztnQkFDakIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxZQUFZLENBQUMsQ0FBQztnQkFFMUI7O21CQUVHO2dCQUNILE9BQU8sQ0FBQyxHQUFHLENBQUMsaUJBQWlCLEVBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQSxZQUFZO2dCQUN2RCxPQUFPLENBQUMsR0FBRyxDQUFDLGVBQWUsRUFBRyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLGFBQWE7Z0JBQzFELE9BQU8sQ0FBQyxHQUFHLENBQUMsZ0JBQWdCLEVBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxhQUFhO1lBQy9ELENBQUM7UUFDTCxDQUFDLEVBQUMsVUFBQSxLQUFLO1lBQ0gsT0FBTyxDQUFDLEdBQUcsQ0FBQyxlQUFlLEVBQUcsS0FBSyxDQUFDLENBQUM7UUFDekMsQ0FBQyxDQUFDLENBQUE7SUFDTixDQUFDO0lBTUwsc0JBQUM7QUFBRCxDQUFDLEFBdEVELElBc0VDO0FBdEVZLGVBQWU7SUFKM0IsZ0JBQVMsQ0FBQztRQUNQLFFBQVEsRUFBRSxRQUFRO1FBQ2xCLFdBQVcsRUFBRSxxQ0FBcUM7S0FDckQsQ0FBQzs7R0FDVyxlQUFlLENBc0UzQjtBQXRFWSwwQ0FBZSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCB9IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XHJcblxyXG5pbXBvcnQgeyBSb3V0ZSB9IGZyb20gXCJAYW5ndWxhci9yb3V0ZXJcIjtcclxuXHJcblxyXG52YXIgU3FsaXRlID0gcmVxdWlyZShcIm5hdGl2ZXNjcmlwdC1zcWxpdGVcIik7XHJcbnZhciBUb2FzdCA9IHJlcXVpcmUoXCJuYXRpdmVzY3JpcHQtdG9hc3RcIik7XHJcblxyXG5cclxuQENvbXBvbmVudCh7XHJcbiAgICBzZWxlY3RvcjogXCJEZWxldGVcIixcclxuICAgIHRlbXBsYXRlVXJsOiBcInZpZXdzL2RlbGV0ZXMvZGVsZXRlLWNvbXBvbmVudC5odG1sXCIsXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBEZWxldGVDb21wb25lbnQge1xyXG4gICAgXHJcbiAgICBcclxuICAgIHByaXZhdGUgZGF0YWJhc2UgOmFueTtcclxuICAgIGVuZ193b3JkPVwiXCI7XHJcbiAgICBcclxuXHJcblxyXG4gICAgY29uc3RydWN0b3IoKXtcclxuICAgICAgICBuZXcgU3FsaXRlKFwiZGljdHMuZGJcIikudGhlbihkYiA9PntcclxuICAgICAgICAgICAgdGhpcy5kYXRhYmFzZSA9IGRiO1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcIk9wZW4gZGF0YWJhc2UgU3VjY2Vzc1wiKTtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgfSxlcnJvciA9PntcclxuICAgICAgICAgICAgY29uc29sZS5sb2coXCJPcGVuIERCIEVSUk9SXCIgLCBlcnJvcik7XHJcbiAgICAgICAgfSlcclxuXHJcbiAgICB9XHJcblxyXG4gICAgYnRuRGVsZXRlKCl7XHJcbiAgICAgICAgLy9jb25zb2xlLmxvZyhcImNoZWNrIGNsaWNrID09ID4gRGVsdGVzIGVuZ193b3JkID09PiBcIiArIHRoaXMuZW5nX3dvcmQpO1xyXG4gICAgICAgIGlmKCB0aGlzLmVuZ193b3JkID09XCJcIil7XHJcbiAgICAgICAgICAgIGFsZXJ0KFwi4Lih4Li24LiH4Lih4Li14LiK4LmI4Lit4LiH4Lin4LmI4Liy4LiH4LiZ4Liw4LmE4Lit4LmJ4LmC4LiH4LmIXCIpO1xyXG4gICAgICAgIH1lbHNle1xyXG4gICAgICAgICAgICB0aGlzLnByb2Nlc3NEZWxldGUoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgXHJcbiAgICB9XHJcblxyXG4gICAgcHJvY2Vzc0RlbGV0ZSgpe1xyXG4gICAgICAgIC8vY29uc29sZS5sb2codGhpcy5lbmdfd29yZCArIFwiIGt1eVwiKTtcclxuICAgICAgICB0aGlzLmRhdGFiYXNlLmV4ZWNTUUwoXCJERUxFVEUgRlJPTSBkaWN0IFdIRVJFIGVuZ1dvcmxkID0oPylcIiAsIFt0aGlzLmVuZ193b3JkXSkudGhlbihpZCA9PiB7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIkRlbHRlIFJFU1VMVCA9PiBcIiAsIGlkICApO1xyXG4gICAgICAgICAgICAgICAgaWYoaWQgPT0gMCl7XHJcbiAgICAgICAgICAgICAgICAgICAgYWxlcnQoXCLguYTguKHguYjguKHguLXguITguLPguKjguLHguJ7guJfguYwgXCIgKyB0aGlzLmVuZ193b3JkICsgXCLguK3guKLguLnguYjguYPguJnguKPguLDguJrguJpcIilcclxuICAgICAgICAgICAgICAgIH1lbHNle1xyXG4gICAgICAgICAgICAgICAgICAgIGFsZXJ0KFwi4LiE4Li44LiT4LmE4LiU4LmJ4Lil4Lia4LiE4Liz4Lio4Lix4Lie4LiX4LmMIFwiICsgdGhpcy5lbmdfd29yZCArIFwiIOC5gOC4o+C4teC4ouC4muC4o+C5ieC4reC4ouC5geC4peC5ieC4p1wiKTtcclxuICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0sIGVycm9yID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIkRlbHRlIEVSUk9SID0+IFwiICwgZXJyb3IpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgIFxyXG4gICAgfVxyXG4gICAgXHJcblxyXG4gICAgcHVibGljIGZldGNoKCl7XHJcbiAgICAgICAgY29uc29sZS5sb2coXCJHbyB0byA9PT0+IGZldGNoXCIpO1xyXG4gICAgICAgIFxyXG4gICAgICAgIHRoaXMuZGF0YWJhc2UuYWxsKFwiU0VMRUNUICogRlJPTSBkaWN0XCIpLnRoZW4ocm93cyA9PntcclxuICAgICAgICAgICAgZm9yKHZhciByb3cgaW4gcm93cyl7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIlJlc3VsdCA9PXZcIik7XHJcbiAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIC8qZm9yKHZhciBpPTAgOyBpIDw9IHJvd3MubGVuZ3RoIDsgaSsrICl7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJyZXN1bHQgPT0+XCIgLCByb3dzW3Jvd11baV0pOyBcclxuICAgICAgICAgICAgICAgIH0qL1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJyZXN1bHQgYWxsID09PiBcIiAsIHJvd3Nbcm93XSk7Ly9yZXN1bHQgYWxsXHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcImVuZ193b3JkID09PiBcIiAsIHJvd3Nbcm93XVsxXSk7IC8vIHJlc3VsdCBlbmdcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwidGhhaV93b3JkID09PiBcIiAsIHJvd3Nbcm93XVsyXSk7IC8vcmVzdWx0IHRoYWlcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sZXJyb3IgPT57XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiU0VMRUNUIEVSUk9SIFwiICwgZXJyb3IpO1xyXG4gICAgICAgIH0pXHJcbiAgICB9XHJcbiAgICBcclxuICAgIFxyXG4gICAgXHJcbiAgICBcclxuXHJcbn1cclxuIl19